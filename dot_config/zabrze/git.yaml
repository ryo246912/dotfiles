.contexts:
  - &git '^git\s'
  - &gitadd '^git.*add\s'
  - &gitbranch '^git.*branch\s'
  - &gitbisect '^git\sbisect\s'
  - &gitcommit '^git.*commit\s'
  - &gitcheckout '^git\scheckout\s'
  - &gitdiff 'git\sdiff\s'
  - &gitlog 'git\slog\s'
  - &gitmerge 'git\smerge\s'
  - &gitpull 'git\spull\s'
  - &gitpush 'git\spush\s'
  - &gitshow 'git\sshow\s'

abbrevs:
  # Basic git commands
  - name: git
    abbr-pattern: ^g$
    snippet: git

  - name: git add
    abbr-pattern: ^ga$
    snippet: git add

  - name: git add .
    abbr: ga.
    snippet: git add .

  - name: git add -p
    abbr: gap
    snippet: git add -p

  - name: git branch
    abbr-pattern: ^gb$
    snippet: git branch

  - name: git branch -a
    abbr: gba
    cursor: "ðŸ‘‡"
    snippet: git branch -a --sort=-committerdateðŸ‘‡ --format='%(HEAD) %(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t' | less -iRMW --use-color

  - name: git branch --show-current
    abbr: gbc
    snippet: git branch --show-current

  - name: git bisect
    abbr: gbi
    snippet: git bisect

  - name: git bisect bad
    abbr: gbib
    snippet: git bisect bad

  - name: git bisect good
    abbr: gbig
    snippet: git bisect good

  - name: git bisect reset
    abbr: gbir
    snippet: git bisect reset

  - name: git branch verbose
    abbr: gbv
    cursor: "ðŸ‘‡"
    snippet: git branch --sort=-committerdateðŸ‘‡ --format='%(HEAD) %(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t'

  - name: git branch verbose2
    abbr: gbvv
    snippet: git branch -vv --sort=-committerdate

  # Checkout commands
  - name: git checkout -b
    abbr: gcb
    snippet: git checkout -b

  - name: git checkout
    abbr: gch
    snippet: git checkout

  - name: git checkout master
    abbr: gchm
    evaluate: true
    snippet: git checkout $(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4)

  - name: git checkout staging
    abbr: gchs
    snippet: git checkout staging

  # Commit commands
  - name: git commit
    abbr: gco
    snippet: git commit

  - name: git commit --amend
    abbr: gca
    snippet: git commit --amend

  - name: git commit --amend --no-edit
    abbr: gcan
    snippet: git commit --amend --no-edit

  - name: git commit -m ''
    abbr: gcm
    snippet: git commit -m '{}'

  - name: git commit --no-edit
    abbr: gcne
    snippet: git commit --no-edit

  - name: git commit --fixup HEAD
    abbr-pattern: (gcof|gcfh)
    snippet: git commit --fixup HEAD

  - name: git cherry-pick -n
    abbr-pattern: (gcr|gchr)
    snippet: git cherry-pick -n

  # Diff commands
  - name: git diff
    abbr-pattern: (^gd$|gshss)
    snippet: git diff

  - name: git diff change
    abbr: gdc
    snippet: git diff --diff-filter=U

  - name: git diff --cached(staged)
    abbr-pattern: (gdc|gds|gshs)
    snippet: git diff --cached

  - name: git show diff
    abbr: gshd
    snippet: git diff HEAD~1...HEAD

  - name: git show diff2
    abbr: gshhd
    snippet: git diff HEAD~2...HEAD~1

  - name: git show diff3
    abbr: gshhhd
    snippet: git diff HEAD~3...HEAD~2

  - name: git show diff9
    abbr-pattern: ^gshd(?<num>\d+)$
    evaluate: true
    snippet: git diff HEAD~$num...HEAD~$(($num - 1))

  # Fetch commands
  - name: git fetch
    abbr-pattern: ^gf$
    snippet: git fetch -p --tags

  - name: git fetch upstream
    abbr: gfu
    snippet: git fetch -p --tags upstream

  # Log commands
  - name: git log
    abbr-pattern: ^gl$
    cursor: "ðŸ‘‡"
    snippet: git log -n 10 ðŸ‘‡--pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S"

  - name: git log -n 20
    abbr: gll
    cursor: "ðŸ‘‡"
    snippet: git log -n 20 ðŸ‘‡--pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S"

  - name: git log -n 30
    abbr: glll
    cursor: "ðŸ‘‡"
    snippet: git log -n 30 ðŸ‘‡--pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S"

  - name: git log -n num * 10
    abbr-pattern: ^gl(?<num>\d+)$
    cursor: "ðŸ‘‡"
    evaluate: true
    snippet: git log -n $(($num * 10)) ðŸ‘‡--pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S"

  - name: git log --graph
    abbr: glg
    cursor: "ðŸ‘‡"
    snippet: git log ðŸ‘‡--date-order --graph --pretty=format:"%C(auto)%>|(60)%h (%C(blue)%cd%C(auto)) %<(15,trunc)%cN%d %s" --date=format:"%Y/%m/%d %H:%M:%S"

  - name: git log --first-parent
    abbr: glp
    cursor: "ðŸ‘‡"
    snippet: git log -n 10 ðŸ‘‡--pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S" --first-parent

  # Merge commands
  - name: git merge
    abbr-pattern: ^gm$
    snippet: git merge --no-ff

  - name: git merge --abort
    abbr: gma
    snippet: git merge --abort

  - name: git merge --squash
    abbr: gms
    snippet: git merge --squash

  - name: git merge origin/xxx
    abbr: gmo
    snippet: git merge --no-ff origin/

  - name: git merge origin/master
    abbr: gmom
    evaluate: true
    snippet: git merge --no-ff origin/$(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4)

  - name: git merge upstream/xxx
    abbr: gmu
    snippet: git merge --no-ff upstream/

  - name: git merge upstream/master
    abbr: gmum
    evaluate: true
    snippet: git merge --no-ff $(git rev-parse --abbrev-ref upstream/HEAD)

  # Pull/Push commands
  - name: git pull
    abbr-pattern: ^gp$
    snippet: git pull --no-commit

  - name: git push origin HEAD
    abbr: gpoh
    cursor: "ðŸ‘‡"
    snippet: git push ðŸ‘‡origin HEAD

  - name: git pull origin master
    abbr: gpom
    evaluate: true
    snippet: git pull origin $(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4) --no-commit

  - name: git push origin staging
    abbr: gpos
    snippet: git push origin staging

  - name: git push upstream HEAD
    abbr: gpuh
    cursor: "ðŸ‘‡"
    snippet: git push ðŸ‘‡upstream HEAD

  - name: git pull upstream master
    abbr: gpum
    evaluate: true
    snippet: git pull upstream $(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4) --no-commit

  # Rebase/Reset commands
  - name: git rebase
    abbr-pattern: ^gr$
    snippet: git rebase --autostash

  - name: git rebase --abort
    abbr: gra
    snippet: git rebase --abort

  - name: git rebase --continue
    abbr: grc
    snippet: git rebase --continue

  - name: git reset --soft HEAD~
    abbr: gre
    snippet: git reset --soft HEAD~

  - name: git reset --hard origin/master
    abbr: greom
    evaluate: true
    snippet: git reset --hard origin/$(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4)

  - name: git reset --hard origin/staging
    abbr: greos
    snippet: git reset --hard origin/staging

  - name: git rebase origin/master
    abbr: grom
    evaluate: true
    snippet: git rebase --autostash origin/$(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4)

  - name: git rebase upstream/master
    abbr: grum
    evaluate: true
    snippet: git rebase --autostash upstream/$(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4)

  # Status and show commands
  - name: git status
    abbr-pattern: ^gs$
    snippet: git status

  - name: git show
    abbr: gsh
    snippet: git show

  - name: git show HEAD~1
    abbr: gshh
    snippet: git show HEAD~1

  - name: git show HEAD~2
    abbr: gshhh
    snippet: git show HEAD~2

  - name: git show HEAD~num
    abbr-pattern: ^gsh(?<num>\d+)$
    evaluate: true
    snippet: git show HEAD~$num

  # Tag commands
  - name: git tag list release
    abbr: gtr
    snippet: git tag -l '*release*' --sort=-creatordate --format='%(if) %(*objectname) %(then) %(*objectname:short) %(else) %(objectname:short) %(end) %09 %(objecttype) %09 %(refname:short) %09 %(creatordate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | head -n 5 | column -ts $'\t'

  - name: git tag list staging
    abbr: gts
    snippet: git tag -l '*staging*' --sort=-creatordate --format='%(if) %(*objectname) %(then) %(*objectname:short) %(else) %(objectname:short) %(end) %09 %(objecttype) %09 %(refname:short) %09 %(creatordate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | head -n 5 | column -ts $'\t'

  # git stash
  - name: git stash
    abbr: gst
    snippet: git stash --include-untracked --message "wip; {}" -- "."

  - name: git stash list
    abbr: gsl
    snippet: git stash list --pretty=format:"%C(green)%gd %C(auto)%h%d %s" --date=format:"%Y/%m/%d-%H:%M:%S"

  - name: git stash pop
    abbr: gsp
    snippet: git stash pop stash@{0}

  # FZF git shortcuts
  - name: fuzzy git branch
    abbr: fgb
    snippet: git for-each-ref --format='%(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t' | fzf | awk '{ print $1 }' | tr -d '\n' | cb

  - name: fuzzy git checkout
    abbr: fgc
    cursor: "ðŸ‘‡"
    snippet: git branch --sort=-committerdateðŸ‘‡ --format='%(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t' | fzf | awk '{ print $1 }' | xargs -I % git checkout %

  - name: fuzzy git hash copy
    abbr: fgh
    snippet: () { local commits commit ; commits=$(git log --oneline) && commit=$(echo "$commits" | fzf --preview "git show {1} | delta --no-gitconfig") && $(echo -n "$commit" | awk '{printf $1}' | cb) }

  - name: fuzzy git hash diff copy
    abbr: fghd
    snippet: () { local commits commit1 commit2 ; commits=$(git log --oneline) && commit1=$(echo "$commits" | fzf | awk '{printf $1}') && commit2=$(echo "$commits" | fzf --preview "git diff "$commit1...{1}" | delta --no-gitconfig" | awk '{printf $1}') && git diff "$commit1...$commit2" | delta && $(echo -n "$commit1...$commit2" | cb) }

  - name: fuzzy git worktree change directory
    abbr: fgwc
    snippet: cd "$(git worktree list | fzf --preview='git log -n 10 --pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S" {2}' | awk '{print $1}')"

  - name: fuzzy git worktree delete directory
    abbr: fgwd
    snippet: git worktree remove -f "$(git worktree list | fzf --preview='git log -n 10 --pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S" {2}' | awk '{print $1}')"

  # Git global abbreviations
  - name: (git) commit
    abbr: co
    snippet: commit
    global: true
    context: *git

  - name: (git) log
    abbr: l
    snippet: log
    global: true
    context: *git

  - name: (git) HEAD commit
    abbr: h
    snippet: HEAD
    global: true
    context: *git

  - name: (git) $num previous commit
    abbr-pattern: h(?<num>\d+)$
    snippet: HEAD~$num
    evaluate: true
    global: true
    context: *git

  - name: (git add) --dry-run
    abbr: d
    snippet: --dry-run
    global: true
    context: *gitadd

  - name: (git branch|for-each-ref) --sort=-committerdate
    abbr: sc
    snippet: --sort=-committerdate
    global: true
    context: '^git\s(branch|for-each-ref)\s'

  - name: (git branch) -vv
    abbr: vv
    snippet: -vv
    global: true
    context: *gitbranch

  - name: (git bisect) bad
    abbr: b
    snippet: bad
    global: true
    context: *gitbisect

  - name: (git bisect) good
    abbr: g
    snippet: good
    global: true
    context: *gitbisect

  - name: (git bisect) reset
    abbr: r
    snippet: reset
    global: true
    context: *gitbisect

  - name: (git commit) -m ""
    abbr: m
    snippet: -m ""
    global: true
    context: *gitcommit

  - name: (git commit) --allow-empty
    abbr-pattern: (ea|ae)
    snippet: --allow-empty
    global: true
    context: *gitcommit

  - name: (git checkout) master/main
    abbr: m
    snippet: $(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4)
    evaluate: true
    global: true
    context: *gitcheckout

  - name: (git checkout) origin
    abbr: o
    snippet: origin/
    global: true
    context: *gitcheckout

  - name: (git checkout) staging
    abbr: s
    snippet: staging
    global: true
    context: *gitcheckout

  - name: (git cherry-pick|rebase|merge) --abort
    abbr: a
    snippet: --abort
    global: true
    context: '^git\s(cherry-pick|rebase|merge)\s'

  - name: (git cherry-pick|rebase|merge) --continue
    abbr: c
    snippet: --continue
    global: true
    context: '^git\s(cherry-pick|rebase|merge)\s'

  - name: (git diff|log|show) --name-only
    abbr: "no"
    snippet: --name-only
    global: true
    context: 'git\s(diff|log|show)\s'

  - name: (git diff) --cached
    abbr: ca
    snippet: --cached
    global: true
    context: *gitdiff

  - name: (git diff) --no-index
    abbr: ni
    snippet: --no-index
    global: true
    context: *gitdiff

  - name: (git diff) --staged
    abbr: st
    snippet: --staged
    global: true
    context: *gitdiff

  - name: (git log) -p
    abbr: p
    snippet: -p
    global: true
    context: *gitlog

  - name: (git log) --all
    abbr: al
    snippet: --all
    global: true
    context: *gitlog

  - name: (git log) --first-parent
    abbr: (fp|fi)
    snippet: --first-parent
    global: true
    context: *gitlog

  - name: (git log) --graph
    abbr: gr
    snippet: --graph
    global: true
    context: *gitlog

  - name: (git log) --no-walk
    abbr: nw
    snippet: --no-walk
    global: true
    context: *gitlog

  - name: (git log) --oneline
    abbr-pattern: (on|ol)
    snippet: --oneline
    global: true
    context: *gitlog

  - name: (git log) --reverse
    abbr: r
    snippet: --reverse
    global: true
    context: *gitlog

  - name: (git log) -n <num>
    abbr-pattern: n\d+$
    snippet: -n ${abbr/n/}
    evaluate: true
    global: true
    context: *gitlog

  - name: (git merge) --no-commit
    abbr: nc
    snippet: --no-commit
    global: true
    context: *gitmerge

  - name: (git pull) --rebase
    abbr: re
    snippet: --rebase
    global: true
    context: *gitpull

  - name: (git push) --force-with-lease
    abbr: f
    snippet: --force-with-lease
    global: true
    context: *gitpush

  - name: (git push) -f
    abbr-pattern: (ff|fo)
    snippet: -f
    global: true
    context: *gitpush

  - name: (git show) --no-patch
    abbr: np
    snippet: --no-patch
    global: true
    context: *gitshow

  - name: (git show) --stat
    abbr-pattern: (-s|-st)
    snippet: --stat
    global: true
    context: *gitshow

  # Gitui
  - name: gitui
    abbr-pattern: ^gu$
    snippet: gitui

  # tig
  - name: tig
    abbr-pattern: ^t$
    snippet: tig

  - name: tig --all
    abbr-pattern: ^ta$
    snippet: tig --all

  - name: tig blame
    abbr-pattern: ^tb$
    snippet: tig blame

  - name: tig status
    abbr-pattern: ^ts$
    snippet: tig status

  - name: (tig) --all
    abbr: a
    snippet: --all
    global: true
    context: '^tig\s'

