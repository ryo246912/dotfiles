abbrevs:
  - name: gh browse
    abbr: ghb
    snippet: gh browse

  - name: gh browse --branch
    abbr: ghbb
    snippet: gh browse --branch $(git symbolic-ref --short HEAD)

  - name: gh browse --settings
    abbr: ghbs
    snippet: gh browse --settings

  - name: gh cache list
    abbr: ghcl
    snippet: gh cache list
      --json key,ref,sizeInBytes,createdAt,lastAccessedAt
      --jq '
        ["key","sizeInBytes","createdAt","lastAccessedAt","ref"],
        ( .[] |
        [.key
        , ((.sizeInBytes / 1024 / 1024 * 100 | floor / 100) | tostring + "MB")
        , ( ((now - (.createdAt | sub("\\..*";"") | strptime("%Y-%m-%dT%H:%M:%S") | mktime)) / 3600) | floor | tostring + " hours ago" )
        , ( ((now - (.lastAccessedAt | sub("\\..*";"") | strptime("%Y-%m-%dT%H:%M:%S") | mktime)) / 3600) | floor | tostring + " hours ago" )
        , .ref
        ])
        | @tsv
      '
      | column -ts $'\t'

  - name: gh-dash
    abbr: ghd
    snippet: gh-dash

  - name: gh issue edit
    abbr: ghie
    snippet: gh issue edit $(gh issue list --author "@me" --state all --limit 100
      --json number,title,author,state,updatedAt,createdAt
      --jq '
        ["no","title","author","state","updatedAt","createdAt"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: gh issue list
    abbr: ghil
    snippet: gh issue list --author "" --assignee "" --search "{}" --state all --limit 100
      --json number,title,author,state,updatedAt,createdAt
      --jq '
        ["no","title","author","state","updatedAt","createdAt"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1

  - name: gh issue view
    abbr: ghiv
    cursor: "ðŸ‘‡"
    snippet: gh issue view --comments ðŸ‘‡$(gh issue list --state all --limit 100
      --json number,title,author,state,updatedAt,createdAt
      --jq '
        ["no","title","author","state","updatedAt","createdAt"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}') -w

  # GitHub pull request commands
  - name: gh pr checkout
    abbr: ghpc
    cursor: "ðŸ‘‡"
    snippet: gh pr checkout ðŸ‘‡$(gh pr list --search "user-review-requested:@me" --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName
        ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: gh pr diff
    abbr: ghpd
    snippet: gh pr diff $(gh pr list --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName
        ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')
      | diffnav

  - name: gh pr edit
    abbr: ghpe
    snippet: gh pr edit $(gh pr list --author "@me" --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName
        ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: gh pr list
    abbr: ghpl
    snippet: gh pr list --author "" --assignee "" --search "{}" --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName
        ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1

  - name: gh pr ready
    abbr: ghpr
    cursor: "ðŸ‘‡"
    snippet: gh pr ready ðŸ‘‡$(gh pr list --author "@me" --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName
        ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: gh pr view
    abbr: ghpv
    cursor: "ðŸ‘‡"
    snippet: gh pr view --comments ðŸ‘‡$(gh pr list --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName
        ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: gh pr checks --watch
    abbr: ghpw
    snippet: gh pr checks $(git symbolic-ref --short HEAD) --watch

  - name: gh run list -w xxx
    abbr: ghrl
    snippet: gh run list -w $(gh workflow list | column -ts $'\t' | fzf | awk '{print $1}')

  - name: gh run list --branch xxx
    abbr: ghrlb
    snippet: gh run list --branch $(git symbolic-ref --short HEAD)

  - name: gh run rerun --failed
    abbr: ghrr
    snippet: gh run rerun --failed

  - name: gh run view --log
    abbr: ghrv
    snippet: gh run view --log

  - name: gh run watch
    abbr: ghrw
    snippet: gh run watch

  - name: gh status
    abbr: ghs
    snippet: gh status

  # GitHub extension
  - name: gh-actions-dash
    abbr: ghad
    snippet: gh-actions-dash

  - name: gh-poi
    abbr: ghp
    snippet: gh-poi

  - name: gh-reassign-reviewer
    abbr: ghr
    snippet: gh-reassign-reviewer

  - name: (gh pr/issue view) -w
    abbr: w
    snippet: -w
    global: true
    context: '^gh\spr\s(view|issue)'

  - name: (gh pr checkout) --detach
    abbr: d
    snippet: --detach
    global: true
    context: '^gh\spr\scheckout'

  - name: (gh pr ready) --undo
    abbr-pattern: (d|u)
    snippet: --undo
    global: true
    context: '^gh\spr\sready'
