abbrevs:
  - name: (ats|ase)
    abbr-pattern: (ats|ase)
    snippet: atuin search -i

  - name: atst
    abbr: atst
    snippet: atuin stats

  - name: c.
    abbr: c.
    snippet: code .

  - name: ch
    abbr: ch
    snippet: chezmoi

  - name: chad
    abbr: chad
    snippet: chezmoi add --template

  - name: (chap|chpa)
    abbr-pattern: (chap|chpa)
    snippet: chezmoi apply --interactive

  - name: chas
    abbr: chas
    snippet: chezmoi apply --source-path

  - name: chcd
    abbr: chcd
    snippet: () { local file ; file=$(chezmoi list -p absolute -i files | fzf) ; [ -n "$file" ] && vim $file }

  - name: chch
    abbr: chch
    snippet: chezmoi chattr +template

  - name: chcs
    abbr: chcs
    snippet: () { local file ; file=$(chezmoi list -p source-absolute -i files | fzf) ; [ -n "$file" ] && vim $file }

  - name: chd
    abbr: chd
    snippet: chezmoi data

  - name: chdi
    abbr: chdi
    snippet: () { local file ; file=$(chezmoi list -p absolute -i files | fzf) ; [ -n "$file" ] && chezmoi diff $file }

  - name: chig
    abbr: chig
    snippet: chezmoi ignored

  - name: che
    abbr: che
    snippet: chezmoi edit --interactive --apply

  - name: chl
    abbr: chl
    snippet: chezmoi list -p source-absolute -i files

  - name: chm
    abbr: chm
    snippet: chezmoi merge $(chezmoi list -p absolute -i files | fzf)

  - name: cz
    abbr: cz
    snippet: czg

  - name: d
    abbr: d
    snippet: docker

  - name: dc
    abbr: dc
    snippet: docker compose

  - name: e
    abbr: e
    snippet: echo

  - name: es
    abbr: es
    snippet: exec $SHELL -l

  - name: fgb
    abbr: fgb
    snippet: git for-each-ref --format='%(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t' | fzf | awk '{ print $1 }' | tr -d '\n' | cb

  - name: fgc
    abbr: fgc
    cursor: "👇"
    snippet: git branch --sort=-committerdate👇 --format='%(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t' | fzf | awk '{ print $1 }' | xargs -I % git checkout %

  - name: fgh
    abbr: fgh
    snippet: () { local commits commit ; commits=$(git log --oneline) && commit=$(echo "$commits" | fzf --preview "git show {1} | delta --no-gitconfig") && $(echo -n "$commit" | awk '{printf $1}' | cb) }

  - name: fghd
    abbr: fghd
    snippet: () { local commits commit1 commit2 ; commits=$(git log --oneline) && commit1=$(echo "$commits" | fzf | awk '{printf $1}') && commit2=$(echo "$commits" | fzf --preview "git diff "$commit1...{1}" | delta --no-gitconfig" | awk '{printf $1}') && git diff "$commit1...$commit2" | delta && $(echo -n "$commit1...$commit2" | cb) }

  - name: fghd
    abbr: fghd
    snippet: () { local commits commit1 commit2 ; commits=$(git log --oneline) && commit1=$(echo "$commits" | fzf | awk '{printf $1}') && commit2=$(echo "$commits" | fzf --preview "git diff "$commit1...{1}" | delta --no-gitconfig" | awk '{printf $1}') && git diff "$commit1...$commit2" | delta && $(echo -n "$commit1...$commit2" | cb) }

  - name: g
    abbr: g
    snippet: git

  - name: ga
    abbr: ga
    snippet: git add

  - name: ga.
    abbr: ga.
    snippet: git add .

  - name: gap
    abbr: gap
    snippet: git add -p

  - name: gb
    abbr: gb
    snippet: git branch

  - name: gba
    abbr: gba
    cursor: "👇"
    snippet: git branch -a --sort=-committerdate👇--format='%(HEAD) %(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t' | less -iRMW --use-color

  - name: gbi
    abbr: gbi
    snippet: git bisect

  - name: gbib
    abbr: gbib
    snippet: git bisect bad

  - name: gbig
    abbr: gbig
    snippet: git bisect good

  - name: gbir
    abbr: gbir
    snippet: git bisect reset

  - name: gbv
    abbr: gbv
    cursor: "👇"
    snippet: git branch --sort=-committerdate👇 --format='%(HEAD) %(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t'

  - name: gbvv
    abbr: gbvv
    snippet: git branch -vv --sort=-committerdate

  - name: gc
    abbr: gc
    snippet: git checkout

  - name: gca
    abbr: gca
    snippet: git commit --amend

  - name: gcan
    abbr: gcan
    snippet: git commit --amend --no-edit

  - name: gcm
    abbr: gcm
    snippet: git commit -m '{}'

  - name: gcne
    abbr: gcne
    snippet: git commit --no-edit

  - name: gcb
    abbr: gcb
    snippet: git checkout -b

  - name: gch
    abbr: gch
    snippet: git checkout

  - name: gchm
    abbr: gchm
    evaluate: true
    snippet: git checkout $(git rev-parse --abbrev-ref origin/HEAD | sed 's|^origin/||')

  - name: gchs
    abbr: gchs
    snippet: git checkout staging

  - name: gco
    abbr: gco
    snippet: git commit

  - name: (gcof|gcfh)
    abbr-pattern: (gcof|gcfh)
    snippet: git commit --fixup HEAD

  - name: (gcr|gchr)
    abbr-pattern: (gcr|gchr)
    snippet: git cherry-pick -n

  - name: gd
    abbr: gd
    snippet: git diff

  - name: gdc
    abbr: gdc
    snippet: git diff --diff-filter=U

  - name: gds
    abbr: gds
    snippet: git diff --cached

  - name: gf
    abbr: gf
    snippet: git fetch -p --tags

  - name: gfu
    abbr: gfu
    snippet: git fetch -p --tags upstream

  - name: ghb
    abbr: ghb
    snippet: gh browse

  - name: ghbb
    abbr: ghbb
    snippet: gh browse --branch $(git symbolic-ref --short HEAD)

  - name: ghbs
    abbr: ghbs
    snippet: gh browse --settings

  - name: ghie
    abbr: ghie
    snippet: gh issue edit $(gh issue list --author "@me" --state all --limit 100
      --json number,title,author,state,updatedAt,createdAt
      --jq '
        ["no","title","author","state","updatedAt","createdAt"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S")) ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: ghil
    abbr: ghil
    snippet: gh issue list --author "" --assignee "" --search "{}" --state all --limit 100
      --json number,title,author,state,updatedAt,createdAt
      --jq '
        ["no","title","author","state","updatedAt","createdAt"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S")) ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1

  - name: ghiv
    abbr: ghiv
    snippet: gh issue view --comments $(gh issue list --state all --limit 100
      --json number,title,author,state,updatedAt,createdAt
      --jq '
        ["no","title","author","state","updatedAt","createdAt"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S")) ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}') -w

  - name: ghpc
    abbr: ghpc
    snippet: gh pr checkout $(gh pr list --search "user-review-requested:@me" --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "◯" else "☓" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: ghpd
    abbr: ghpd
    snippet: gh pr diff $(gh pr list --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "◯" else "☓" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')
      | diffnav

  - name: ghpe
    abbr: ghpe
    snippet: gh pr edit $(gh pr list --author "@me" --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "◯" else "☓" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: ghpl
    abbr: ghpl
    snippet: gh pr list --author "" --assignee "" --search "{}" --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "◯" else "☓" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1

  - name: ghpr
    abbr: ghpr
    cursor: "👇"
    snippet: gh pr ready 👇$(gh pr list --author "@me" --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "◯" else "☓" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: ghpv
    abbr: ghpv
    snippet: gh pr view --comments $(gh pr list --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "◯" else "☓" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: ghpw
    abbr: ghpw
    snippet: gh pr checks $(git symbolic-ref --short HEAD) --watch

  - name: ghrl
    abbr: ghrl
    snippet: gh run list --limit 40

  - name: ghrlf
    abbr: ghrlf
    snippet: gh run list --status failure

  - name: ghrll
    abbr: ghrll
    snippet: gh run list -w $(gh workflow list | column -ts $'\t' | fzf | awk '{print $1}')

  - name: ghrr
    abbr: ghrr
    snippet: gh run rerun --failed

  - name: ghrv
    abbr: ghrv
    snippet: gh run view --log-failed

  - name: ghrw
    abbr: ghrw
    snippet: gh run watch

  - name: ghs
    abbr: ghs
    snippet: gh status

  - name: ghp
    abbr: ghp
    snippet: gh-poi

  - name: gl
    abbr: gl
    cursor: "👇"
    snippet: git log -n 10 👇--pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S"

  - name: gll
    abbr: gll
    cursor: "👇"
    snippet: git log -n 20 👇--pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S"

  - name: glll
    abbr: glll
    cursor: "👇"
    snippet: git log -n 30 👇--pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S"

  - name: glg
    abbr: glg
    cursor: "👇"
    snippet: git log 👇--date-order --graph --pretty=format:"%C(auto)%>|(60)%h (%C(blue)%cd%C(auto)) %<(15,trunc)%cN%d %s" --date=format:"%Y/%m/%d %H:%M:%S"

  - name: glp
    abbr: glp
    cursor: "👇"
    snippet: git log -n 10 👇--pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S" --first-parent

  - name: gm
    abbr: gm
    snippet: git merge --no-ff

  - name: gma
    abbr: gma
    snippet: git merge --abort

  - name: gmo
    abbr: gmo
    snippet: git merge --no-ff origin/

  - name: gmom
    abbr: gmom
    evaluate: true
    snippet: git merge --no-ff $(git rev-parse --abbrev-ref origin/HEAD)

  - name: gmu
    abbr: gmu
    snippet: git merge --no-ff upstream/

  - name: gmum
    abbr: gmum
    evaluate: true
    snippet: git merge --no-ff $(git rev-parse --abbrev-ref upstream/HEAD)

  - name: gp
    abbr: gp
    snippet: git pull --no-commit

  - name: gpoh
    abbr: gpoh
    cursor: "👇"
    snippet: git push 👇origin HEAD

  - name: gpom
    abbr: gpom
    evaluate: true
    snippet: git pull origin $(git rev-parse --abbrev-ref origin/HEAD | sed 's|^origin/||') --no-commit

  - name: gpos
    abbr: gpos
    snippet: git push origin staging

  - name: gpum
    abbr: gpum
    evaluate: true
    snippet: git pull upstream $(git rev-parse --abbrev-ref origin/HEAD | sed 's|^origin/||') --no-commit

  - name: gr
    abbr: gr
    snippet: git rebase --autostash

  - name: gra
    abbr: gra
    snippet: git rebase --abort

  - name: grc
    abbr: grc
    snippet: git rebase --continue

  - name: greom
    abbr: greom
    evaluate: true
    snippet: git reset --hard $(git rev-parse --abbrev-ref origin/HEAD)

  - name: greos
    abbr: greos
    snippet: git reset --hard origin/staging

  - name: grom
    abbr: grom
    evaluate: true
    snippet: git rebase --autostash $(git rev-parse --abbrev-ref origin/HEAD)

  - name: grum
    abbr: grum
    evaluate: true
    snippet: git rebase --autostash upstream/$(git rev-parse --abbrev-ref origin/HEAD | sed 's|^origin/||')

  - name: gs
    abbr: gs
    snippet: git status

  - name: (gsa|gtl)
    abbr-pattern: (gsa|gtl)
    snippet: gita ll

  - name: gsh
    abbr: gsh
    snippet: git show

  - name: gshh
    abbr-pattern: (gshh|gsh1)
    snippet: git show HEAD~1

  - name: gshhh
    abbr-pattern: (gshhh|gsh2)
    snippet: git show HEAD~2

  - name: gs3
    abbr: gsh3
    snippet: git show HEAD~3

  - name: gs4
    abbr: gsh4
    snippet: git show HEAD~4

  - name: gs5
    abbr: gsh5
    snippet: git show HEAD~5

  - name: gs6
    abbr: gsh6
    snippet: git show HEAD~6

  - name: gs7
    abbr: gsh7
    snippet: git show HEAD~7

  - name: gs8
    abbr: gsh8
    snippet: git show HEAD~8

  - name: gs9
    abbr: gsh9
    snippet: git show HEAD~9

  - name: (gshs|gds)
    abbr-pattern: (gshs|gds)
    snippet: git diff --cached

  - name: gtr
    abbr: gtr
    snippet: git tag -l '*release*' --sort=-creatordate --format='%(if) %(*objectname) %(then) %(*objectname:short) %(else) %(objectname:short) %(end) %09 %(objecttype) %09 %(refname:short) %09 %(creatordate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | head -n 5 | column -ts $'\t'

  - name: gts
    abbr: gts
    snippet: git tag -l '*staging*' --sort=-creatordate --format='%(if) %(*objectname) %(then) %(*objectname:short) %(else) %(objectname:short) %(end) %09 %(objecttype) %09 %(refname:short) %09 %(creatordate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | head -n 5 | column -ts $'\t'

  - name: gu
    abbr: gu
    snippet: gitui

  - name: koji
    abbr: ko
    snippet: koji --config ~/.config/koji/config.toml

  - name: ld
    abbr: ld
    snippet: lazydocker

  - name: la
    abbr: la
    snippet: ls -la

  - name: ll
    abbr: ll
    snippet: ls -l

  - name: m
    abbr: m
    snippet: make

  - name: mh
    abbr: mh
    snippet: make help

  - name: ml
    abbr: ml
    snippet: make lint

  - name: mlo
    abbr: mlo
    snippet: make local | spacer --after 5

  - name: mf
    abbr: mf
    snippet: make freshup-local-for-py-engineer

  - name: mu
    abbr: mu
    snippet: make unittest

  # - name: np
  #   abbr: np
  #   snippet: () { local COMMAND=$(navi --print) && echo "実行しますか? : $COMMAND" && read && eval "$COMMAND" }

  - name: nc
    abbr: nc
    snippet: npm ci

  - name: nr
    abbr: nr
    snippet: npm run

  - name: nrb
    abbr: nrb
    snippet: npm run build

  - name: nrd
    abbr: nrd
    snippet: npm run dev

  - name: nrf
    abbr: nrf
    snippet: npm run fix

  - name: nrl
    abbr: nrl
    snippet: npm run lint

  - name: nro
    abbr: nro
    snippet: npm run orval

  - name: nrt
    abbr: nrt
    snippet: npm run test

  - name: nrtd
    abbr: nrtd
    snippet: npm run test $(git diff --name-only --line-prefix=$(git rev-parse --show-toplevel)/ origin/master...HEAD | grep -E '.*spec.*')

  - name: nrv
    abbr: nrv
    snippet: npm run vite

  - name: p
    abbr: p
    snippet: "|"
    global: true

  - name: pr
    abbr: pr
    snippet: pdm run
    if: '[[ -f "./pyproject.toml" ]]'

  - name: prd
    abbr: prd
    snippet: pdm run dev | spacer --after 5
    if: '[[ -f "./pyproject.toml" ]]'

  - name: prf
    abbr: prf
    snippet: pdm run fix
    if: '[[ -f "./pyproject.toml" ]]'

  - name: prl
    abbr: prl
    snippet: pdm run lint
    if: '[[ -f "./pyproject.toml" ]]'

  - name: prt
    abbr: prt
    snippet: pdm run test
    if: '[[ -f "./pyproject.toml" ]]'

  - name: (psy|pdsy)
    abbr-pattern: (psy|pdsy)
    snippet: pdm sync
    if: '[[ -f "./pyproject.toml" ]]'

  - name: pnpm ci|pnpm install --frozen-lockfile
    abbr: pc
    snippet: pnpm install --frozen-lockfile
    if: '[[ -f "./pnpm-lock.yaml" ]]'

  - name: pnpm (install|add) package
    abbr-pattern: (pi|pa)
    snippet: pnpm add
    if: '[[ -f "./pnpm-lock.yaml" ]]'

  - name: pnpm install
    abbr: pin
    snippet: pnpm install
    if: '[[ -f "./pnpm-lock.yaml" ]]'

  - name: pnpm uninstall package
    abbr-pattern: (pui|pre)
    snippet: pnpm remove
    if: '[[ -f "./pnpm-lock.yaml" ]]'

  - name: s
    abbr: s
    snippet: sudo

  - name: sp
    abbr: sp
    global: true
    snippet: "|& spacer --after 5"

  - name: t
    abbr: t
    snippet: tig

  - name: ta
    abbr: ta
    snippet: tig --all

  - name: tb
    abbr: tb
    snippet: tig blame

  - name: ts
    abbr: ts
    snippet: tig status

  - name: ug
    abbr-pattern: (ug|igrep)
    snippet: ug -QPn

  - name: up
    abbr: up
    snippet: up --noinput

  - name: v
    abbr: v
    snippet: vim

  - name: v.
    abbr: v.
    snippet: vim .

  - name: w
    abbr: w
    snippet: which

  - name: "y"
    abbr: "y"
    snippet: yazi

  - name: zi
    abbr: zi
    snippet: zinit

  - name: zz
    abbr: zz
    snippet: ji

  - name: (delta) --no-gitconfig
    abbr: ng
    snippet: --no-gitconfig
    global: true
    context: '.*delta\s'

  - name: (git) commit
    abbr: co
    snippet: commit
    global: true
    context: '^git\s'

  - name: (git) log
    abbr: l
    snippet: log
    global: true
    context: '^git\s'

  - name: (git add) --dry-run
    abbr: d
    snippet: --dry-run
    global: true
    context: '^git.*add\s'

  - name: (git branch|for-each-ref) --sort=-committerdate
    abbr: sc
    snippet: --sort=-committerdate
    global: true
    context: '^git\s(branch|for-each-ref)\s'

  - name: (git branch) -vv
    abbr: vv
    # abbr-pattern: (v|vv)
    snippet: -vv
    global: true
    context: '^git.*branch\s'

  - name: (git bisect) bad
    abbr: b
    snippet: bad
    global: true
    context: '^git\sbisect\s'

  - name: (git bisect) good
    abbr: g
    snippet: good
    global: true
    context: '^git\sbisect\s'

  - name: (git bisect) reset
    abbr: r
    snippet: reset
    global: true
    context: '^git\sbisect\s'

  - name: (git commit) -m ""
    abbr: m
    snippet: -m ""
    global: true
    context: '^git.*commit\s'

  - name: (git commit) --allow-empty
    abbr-pattern: (ea|ae)
    snippet: --allow-empty
    global: true
    context: '^git.*commit\s'

  - name: (git checkout) master/main
    abbr: m
    snippet: $(git rev-parse --abbrev-ref origin/HEAD | sed 's|^origin/||')
    evaluate: true
    global: true
    context: '^git\scheckout\s'

  - name: (git checkout) origin
    abbr: o
    snippet: origin/
    global: true
    context: '^git\scheckout\s'

  - name: (git checkout) staging
    abbr: s
    snippet: staging
    global: true
    context: '^git\scheckout\s'

  - name: (git cherry-pick|rebase|merge) --abort
    abbr: a
    snippet: --abort
    global: true
    context: '^git\s(cherry-pick|rebase|merge)\s'

  - name: (git cherry-pick|rebase|merge) --continue
    abbr: c
    snippet: --continue
    global: true
    context: '^git\s(cherry-pick|rebase|merge)\s'

  - name: (git diff|log|show) --name-only
    abbr: "no"
    snippet: --name-only
    global: true
    context: 'git\s(diff|log|show)\s'

  - name: (git diff) --cached
    abbr: ca
    snippet: --cached
    global: true
    context: 'git\sdiff\s'

  - name: (git diff) --staged
    abbr: st
    snippet: --staged
    global: true
    context: 'git\sdiff\s'

  - name: (git log) --all
    abbr: al
    snippet: --all
    global: true
    context: 'git\slog\s'

  - name: (git log) --first-parent
    abbr: (fp|fi)
    snippet: --first-parent
    global: true
    context: 'git\slog\s'

  - name: (git log) --graph
    abbr: gr
    snippet: --graph
    global: true
    context: 'git\slog\s'

  - name: (git log) --no-walk
    abbr: nw
    snippet: --no-walk
    global: true
    context: 'git\slog\s'

  - name: (git log) --oneline
    abbr-pattern: (on|ol)
    snippet: --oneline
    global: true
    context: 'git\slog\s'

  - name: (git log) --reverse
    abbr: r
    snippet: --reverse
    global: true
    context: 'git\slog\s'

  - name: (git log) -n <num>
    abbr-pattern: n\d+$
    snippet: -n ${abbr/n/}
    evaluate: true
    global: true
    context: 'git\slog\s'

  - name: (git merge) --no-commit
    abbr: nc
    snippet: --no-commit
    global: true
    context: 'git\smerge\s'

  - name: (git pull) --rebase
    abbr: re
    snippet: --rebase
    global: true
    context: 'git\spull\s'

  # - name: (git push) --force-if-includes
  #   abbr: f
  #   snippet: --force-if-includes
  #   global: true
  #   context: '^git\spush\s'

  - name: (git push) --force-with-lease
    abbr: f
    snippet: --force-with-lease
    global: true
    context: '^git\spush\s'

  - name: (git push) -f
    abbr-pattern: (ff|fo)
    snippet: -f
    global: true
    context: '^git\spush\s'

  - name: (git show) --no-patch
    abbr: np
    snippet: --no-patch
    global: true
    context: '^git\sshow\s'

  - name: (git show) --stat
    abbr-pattern: (-s|-st)
    snippet: --stat
    global: true
    context: '^git\sshow\s'

  - name: (gh pr ready) --undo
    abbr-pattern: (d|u)
    snippet: --undo
    global: true
    context: '^gh\spr\sready'

  - name: (pdm run) -l
    abbr: l
    snippet: -l
    global: true
    context: '^pdm\srun\s'

  - name: (tig) --all
    abbr: a
    snippet: --all
    global: true
    context: '^tig\s'
