abbrevs:
  # GitHub browse commands
  - name: ghb
    abbr: ghb
    snippet: gh browse

  - name: ghbb
    abbr: ghbb
    snippet: gh browse --branch $(git symbolic-ref --short HEAD)

  - name: ghbs
    abbr: ghbs
    snippet: gh browse --settings

  # GitHub dashboard
  - name: ghd
    abbr: ghd
    snippet: gh-dash

  # GitHub issue commands
  - name: ghie
    abbr: ghie
    snippet: gh issue edit $(gh issue list --author "@me" --state all --limit 100
      --json number,title,author,state,updatedAt,createdAt
      --jq '
        ["no","title","author","state","updatedAt","createdAt"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S")) ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: ghil
    abbr: ghil
    snippet: gh issue list --author "" --assignee "" --search "{}" --state all --limit 100
      --json number,title,author,state,updatedAt,createdAt
      --jq '
        ["no","title","author","state","updatedAt","createdAt"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S")) ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1

  - name: ghiv
    abbr: ghiv
    snippet: gh issue view --comments $(gh issue list --state all --limit 100
      --json number,title,author,state,updatedAt,createdAt
      --jq '
        ["no","title","author","state","updatedAt","createdAt"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S")) ])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}') -w

  # GitHub pull request commands
  - name: ghpc
    abbr: ghpc
    snippet: gh pr checkout $(gh pr list --search "user-review-requested:@me" --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: ghpd
    abbr: ghpd
    snippet: gh pr diff $(gh pr list --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')
      | diffnav

  - name: ghpe
    abbr: ghpe
    snippet: gh pr edit $(gh pr list --author "@me" --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: ghpl
    abbr: ghpl
    snippet: gh pr list --author "" --assignee "" --search "{}" --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1

  - name: ghpr
    abbr: ghpr
    cursor: "ðŸ‘‡"
    snippet: gh pr ready ðŸ‘‡$(gh pr list --author "@me" --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: ghpv
    abbr: ghpv
    snippet: gh pr view --comments $(gh pr list --state all --limit 100
      --json number,title,author,state,isDraft,updatedAt,createdAt,headRefName
      --jq '
        ["no","title","author","state","draft","updatedAt","createdAt","branch"],
        ( .[] |
        [.number
        , .title[0:50]
        , .author.login
        , .state
        , (if .isDraft then "â—¯" else "â˜“" end )
        , (.updatedAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , (.createdAt | strptime("%Y-%m-%dT%H:%M:%SZ") | strftime("%Y/%m/%d %H:%M:%S"))
        , .headRefName])
        | @tsv
      '
      | column -ts $'\t'
      | fzf --no-sort --header-lines=1
      | awk '{ print $1}')

  - name: ghpw
    abbr: ghpw
    snippet: gh pr checks $(git symbolic-ref --short HEAD) --watch

  # GitHub run commands
  - name: ghrl
    abbr: ghrl
    snippet: gh run list --limit 40

  - name: ghrlf
    abbr: ghrlf
    snippet: gh run list --status failure

  - name: ghrll
    abbr: ghrll
    snippet: gh run list -w $(gh workflow list | column -ts $'\t' | fzf | awk '{print $1}')

  - name: ghrr
    abbr: ghrr
    snippet: gh run rerun --failed

  - name: ghrv
    abbr: ghrv
    snippet: gh run view

  - name: ghrvl
    abbr: ghrvl
    snippet: gh run view --log

  - name: ghrvll
    abbr: ghrvll
    snippet: gh run view --log-failed

  - name: ghrw
    abbr: ghrw
    snippet: gh run watch

  # GitHub status
  - name: ghs
    abbr: ghs
    snippet: gh status

  # GitHub poi
  - name: ghp
    abbr: ghp
    snippet: gh-poi

  # GitHub global abbreviations
  - name: (gh pr ready) --undo
    abbr-pattern: (d|u)
    snippet: --undo
    global: true
    context: '^gh\spr\sready'