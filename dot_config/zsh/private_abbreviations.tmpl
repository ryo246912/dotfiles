abbr ch='chezmoi'
abbr chad='chezmoi add --template'
abbr chap='chezmoi apply --interactive'
abbr chas='chezmoi apply --source-path'
abbr chcd='() { local file ; file=$(chezmoi list -p absolute -i files | fzf) ; [ -n "$file" ] && vim $file }'
abbr chcs='() { local file ; file=$(chezmoi list -p source-absolute -i files | fzf) ; [ -n "$file" ] && vim $file }'
abbr chch='chezmoi chattr +template'
abbr chd='chezmoi data'
abbr chdi='() { local file ; file=$(chezmoi list -p absolute -i files | fzf) ; [ -n "$file" ] && chezmoi diff $file }'
abbr chig='chezmoi ignored'
abbr che='chezmoi edit --interactive --apply'
abbr chl='chezmoi list -p source-absolute -i files'
abbr chm='() { local file ; file=$(chezmoi list -p absolute -i files | fzf) ; [ -n "$file" ] && chezmoi merge $file }'

abbr cz='czg'

abbr d='docker'
abbr dc='docker-compose'

abbr e='echo'
abbr es='exec $SHELL -l'

abbr -g g='git'
abbr ga='git add'
abbr ga.='git add .'
abbr gad='git add --dry-run'
abbr gad.='git add --dry-run .'
abbr gap='git add -p'
abbr gb='git branch'
abbr gbb='git bisect bad'
abbr gbg='git bisect good'
abbr gbr='git bisect reset'
abbr gbv="git branch --format='%(HEAD) %(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t'"
abbr gbvv="git branch -vv"
abbr gc='git checkout'
abbr gca='git commit --amend'
abbr gcam='git commit --amend -m ""'
abbr gcm='git commit -m ""'
abbr gcb='git checkout -b'
abbr gcha='git cherry-pick --abort'
abbr gchb='git checkout -b'
abbr gchc='git cherry-pick --continue'
abbr gchs='git checkout staging'
abbr gchm='git checkout master'
abbr gch='git cherry-pick -n'
abbr gd='git diff'
abbr gdeos='git describe origin/staging'
abbr gdeom='git describe origin/master'
abbr gdn='git diff --name-only'
abbr gds='git diff --cached'
abbr gdsn='git diff --cached --name-only'
abbr gf='git fetch -p --tags'
abbr gfu='git fetch -p --tags upstream'
abbr gg='git grep'
abbr gl='git log -n 10 --pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S"'
abbr gll='git log -n 20 --pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S"'
abbr glll='git log -n 30 --pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S"'
abbr glg='git log --date-order --graph --pretty=format:"%C(auto)%>|(60)%h (%C(blue)%cd%C(auto)) %<(15,trunc)%cN%d %s" --date=format:"%Y/%m/%d %H:%M:%S"'
abbr glp='git log -n 10 --pretty=format:"%C(auto)%h (%C(blue)%cd%C(auto))%d %s %Cblue[%cn]" --date=format:"%Y/%m/%d %H:%M:%S" --first-parent'
abbr gm='git merge --no-ff'
abbr gmd='git merge --no-commit --no-ff && git diff --cached --name-only'
abbr gmo='git merge --no-ff origin/'
abbr gma='git merge --abort'
abbr gp='git pull --no-commit'
abbr gpo='git pull origin --no-commit'
abbr gpoh='git push origin HEAD'
abbr gpos='git push origin staging'
abbr gpom='git pull origin master --no-commit'
abbr gpum='git pull upstream master --no-commit'
abbr gra='git rebase --abort'
abbr grc='git rebase --continue'
abbr gre='git rebase --edit-todo'
abbr grs='git rebase --skip'
abbr greom='git reset --hard origin/master'
abbr greos='git reset --hard origin/staging'
abbr gref='git reflog'
abbr grom='git rebase --autostash origin/master'
abbr gs='git status'
abbr gsh='git show'
abbr gshn='git show --no-patch'
abbr gshh='git show HEAD~1'
abbr gshhh='git show HEAD~2'
abbr gsh1='git show HEAD~1'
abbr gsh2='git show HEAD~1'
abbr gst='git stash'
abbr gtr="git tag -l '*release*' --sort=-creatordate --format='%(if) %(*objectname) %(then) %(*objectname:short) %(else) %(objectname:short) %(end) %09 %(objecttype) %09 %(refname:short) %09 %(creatordate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | head -n 5 | column -ts $'\t'"
abbr gts="git tag -l '*staging*' --sort=-creatordate --format='%(if) %(*objectname) %(then) %(*objectname:short) %(else) %(objectname:short) %(end) %09 %(objecttype) %09 %(refname:short) %09 %(creatordate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | head -n 5 | column -ts $'\t'"
abbr gu='gitui'

abbr fgb="git for-each-ref --format='%(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t' | fzf | awk '{ print $1 }' | tr -d '\n' | cb"
abbr fgc="git branch --format='%(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t' | fzf | awk '{ print $1 }' | xargs -I % git checkout %"
abbr fgh="() { local commits commit ; commits=$(git log --oneline) && commit=$(echo "$commits" | fzf --preview "git show {1} | delta --no-gitconfig") && $(echo -n "$commit" | awk '{printf $1}' | cb) }"
abbr fghd="() { local commits commit1 commit2 ; commits=$(git log --oneline) && commit1=$(echo "$commits" | fzf | awk '{printf $1}') && commit2=$(echo "$commits" | fzf --preview "git diff "$commit1...{1}" | delta --no-gitconfig" | awk '{printf $1}') && git diff "$commit1...$commit2" | delta && $(echo -n "$commit1...$commit2" | cb) }"
abbr fhq='() { local dir=$(ghq list --full-path | fzf ) ; if [ -n "$dir" ]; then cd $dir ; else return 1 ; fi }'
#abbr fz='() { local dir=$(z | sort -rn | cut -c 12- | fzf) ; if [ -n "$dir" ]; then cd $dir ; else return 1 ; fi }'

{{ if eq .chezmoi.os "darwin" -}}
abbr mh='make help'
abbr ml='make lint'
abbr mf='make freshup-local-for-py-engineer'
{{- end }}

abbr np='() { local COMMAND=$(navi --print) && echo "実行しますか? : $COMMAND" && read && eval "$COMMAND" }'

abbr nr='npm run'
abbr nrb='npm run build'
abbr nrd='npm run dev'
abbr nrf='npm run fix'
abbr nrl='npm run lint'
abbr nrs='npm run storybook'
abbr nrt='npm run test'
abbr nrtd='npm run test $(git diff --name-only --line-prefix=$(git rev-parse --show-toplevel)/ master...HEAD | grep -E ".*spec.*")'
abbr nrv='npm run vite'

abbr s='sudo'
abbr up='up --noinput'
abbr ug='ug -QPn'
abbr v.='vim .'
abbr w='which'
abbr y='yazi'
abbr zz='zi'
abbr -g p='|'
abbr -g v='vim'
