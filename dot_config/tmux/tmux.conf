# マウスでウィンドウ・ペインの切り替えやリサイズを可能にする
set -g mouse on

bind -T edit-mode-vi WheelUpPane send-keys -X scroll-up
bind -T edit-mode-vi WheelDownPane send-keys -X scroll-down

# スクロール可能な行数を10,000行にする
set -g history-limit 10000

# copy-pipeのデフォルトでpipeされるコマンドを指定
set -g copy-command cb

# status line を更新する間隔を 1 秒にする
set -g status-interval 1

#--------------------------------------------------------------
# style
#--------------------------------------------------------------

# True color化対応
set -g default-terminal "screen-256color"
# set -g default-terminal "tmux-256color" # tmux-256colorではMacOSでは表示崩れがあったため
set -ag terminal-overrides ",alacritty:RGB,rio:Tc"

# ステータスバーの背景色を変更する
set -g status-bg "#000000"

# status line の文字色を指定する
set -g status-fg "#FFFFFF"

# window-status を中央揃えで配置する
set -g status-justify "centre"

# ステータスバーをトップに配置する
set -g status-position top

# ペインの開始番号を 0 から 1 に変更する
set -g base-index 1
# ウィンドウ閉じたらウィンドウ番号詰める
set -g renumber-windows on

# window名の背景色・文字色を指定
set -g window-status-format '#[bg=#808080] #I #{b:pane_current_path} '
set -g window-status-current-format '#[bg=#ffff00]#[fg=#000000]#{?client_prefix,#[bg=#00ff00],}#{?pane_synchronized,#[bg=#00FFBF],} #I #{b:pane_current_path}#{?window_zoomed_flag,Z,} '

# windowの背景色を指定
set -g window-style 'fg=#9e9e9e,bg=#303030'
set -g window-active-style 'fg=#bcbcbc,bg=#000000'

# copy-modeの検索のスタイルを指定
set -g mode-style "fg=#000000,bg=#ffff00"
set -g copy-mode-match-style "fg=#000000,bg=#ffff00"
set -g copy-mode-current-match-style "fg=#ffff00,bg=#ff0000"

# ペインのステータスラインのスタイルを指定
set -g pane-border-status bottom
set -g pane-border-format "#[fg=#000000,bg=#ffff00]#{?pane_active,#[bg=#ff0000],} #S:#I.#P #{b:pane_current_path} (#{pane_tty}) "

#--------------------------------------------------------------
# key-binding
#--------------------------------------------------------------

# コピーモードのキー操作をviライクにする
set-window-option -g mode-keys vi

# 選択開始キーの設定
bind -T copy-mode-vi v send-keys -X begin-selection

# 矩形(くけい)選択のON/OFF
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle

# 選択範囲のコピー(copy-pipe=コピーモード抜けない)
bind -T copy-mode-vi Enter send-keys -X copy-pipe

# mark部分にjump
bind -T copy-mode-vi x send-keys -X jump-to-mark

# コピーモード時に ? でsearch-backward
bind -T copy-mode-vi "?" command-prompt -T search -p "(search up)" { send-keys -X search-backward "%%" }

# コピーモード→検索を1コマンドに設定
bind c-f copy-mode \
  "\;" command-prompt -T search -p "(search up)" { send-keys -X search-backward "%%" }
# bind c-u run-shell "if [ copy-mode = $(tmux display -p -F "{pane_mode}") ] ; then tmux send-keys -X halfpage-up ; else tmux copy-mode && send-keys -X halfpage-up ; fi"

# 現在のディレクトリで水平/垂直分割
bind '"' split-window -c '#{pane_current_path}'
bind '%' split-window -h -c '#{pane_current_path}'

# ウィンドウの入れ替え
bind C-x swap-window -t -1 "\;" previous-window
bind C-] swap-window -t +1 "\;" next-window

# ペインの上下左右・前後移動
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
# bind C-i select-pane -t :.-
# bind C-] select-pane -t :.+

# ペインの幅を上下左右に広げる
bind C-h resize-pane -L 1
bind C-i resize-pane -D 1 #ctrl + jが入力できないため、代わりに設定
bind C-j resize-pane -D 1
bind C-k resize-pane -U 1
bind C-l resize-pane -R 1

# ペインを数字選択で移動
bind-key C-v display-panes
set -g display-panes-time 10000
set -g pane-base-index 1

# synchronize-panesのON/OFF [if-shell "条件式" "true" "false"][-F:フォーマットを展開後に成否判定][#{==:a,b}|aとbが等しいかを比べる比較構文]
bind e if-shell -F "#{==:#{pane_synchronized},0}" "set synchronize-panes on" "set synchronize-panes off"

# 設定ファイルのリロード
bind r source-file ~/.config/tmux/tmux.conf "\;" display "Reloaded!"

# popup window(popup)を起動/デタッチ [-E:exit時に自動で閉じる]
bind C-p popup -xC -yC -w95% -h95% -E -d "#{pane_current_path}" '\
  if [ popup = $(tmux display -p -F "#{session_name}") ]; then \
    tmux detach-client ; \
  else \
    # {while ~ done ; echo}でwhile内の変数参照、グルーピング{}の最後にも ; }必要
    # ディレクトリが一致するwindowを取得、例)popup:3.0
    window=$(tmux lsp -s -t popup | { while read pane; do [ $(tmux display -p -F "#{pane_current_path}") = $(tmux display -t popup:${pane%:*} -p -F "#{pane_current_path}") ] && pd=${pane%:*} ; done ; echo "popup:${pd}" ; } ) ; \
    # [-c:new-window時のディレクトリを指定]
    tmux attach -c $(tmux display -p -F "#{pane_current_path}") -t $window || tmux new -s popup ; \
  fi \
'

# popup window(gpt)を起動/デタッチ [-E:exit時に自動で閉じる]
bind C-t popup -xC -yC -w95% -h95% -E -d "#{pane_current_path}" '\
  if [ gpt = $(tmux display -p -F "#{session_name}") ]; then \
    tmux detach-client ; \
  else \
    tmux attach -c $(tmux display -p -F "#{pane_current_path}") -t gpt || tmux new -s gpt ; \
  fi \
'

# popup window(navi)を起動/デタッチ [-E:exit時に自動で閉じる]
# [-b:buffer name][-d:delete buffer][-r:LFを自動で置換しない][-p:paste時にコマンドを自動で実行しない][-t:target pane]
#後方の空白文字を削除 ${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"}
#前方の空白文字を削除 ${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"}
#複数の連続した空白を1つにする sed -e "s/  */ /g"
bind C-g popup -xC -y "#{popup_pane_bottom}" -w95% -h40% -E '\
  window=$(tmux display -p -F "#S:#I.#P") && \
  export FZF_DEFAULT_OPTS="-m --layout=reverse --border" && \
  TMP_BUFFER=$(navi --print | tr "\n" " ") && \
  TMP_BUFFER=${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"} && \
  TMP_BUFFER=${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"} && \
  TMP_BUFFER=$(echo "$TMP_BUFFER" | sed -e "s/  */ /g") && \
  tmux set-buffer -b tmp "$TMP_BUFFER" && \
  tmux paste-buffer -drp -t $window -b tmp \
'

# popup window(shortcut)を起動/デタッチ [-E:exit時に自動で閉じる]
bind C-s popup -xC -yC -w95% -h50% -E -d "#{pane_current_path}" '\
  export FZF_DEFAULT_OPTS="-m --layout=reverse --border" && \
  no=$(echo "1 ~/.local/share/chezmoi/not_config/shortcut/list.csv\n2 ~/.config/vim/vim.md" | fzf | cut -d " " -f1) && \
  if [ $no = "1" ]; then \
    cat ~/.local/share/chezmoi/not_config/shortcut/list.csv | column -t -s, | fzf --no-sort; \
  elif [ $no = "2" ]; then \
    bat ~/.config/vim/vim.md --theme "Monokai Extended" --paging always; \
  else \
    echo "pass"; \
  fi \
'

# git_worktree_managerを起動
bind C-w popup -xC -yC -w95% -h95% -E -d "#{pane_current_path}" '\
  local current_path="$(pwd)" && \
  tmux send-keys -t popup "cd $current_path && sh $HOME/.local/share/chezmoi/not_config/script/git_worktree_manager.sh" C-m && \
  tmux attach -t popup
'

# gituiを起動
bind C-d popup -xC -yC -w95% -h95% -E -d "#{pane_current_path}" '\
  local current_path="$(pwd)" && \
  tmux send-keys -t popup "cd $current_path && gitui" C-m && \
  tmux attach -t popup
'

# yaziを起動
bind C-y popup -xC -yC -w95% -h95% -E -d "#{pane_current_path}" '\
  local current_path="$(pwd)" && \
  tmux send-keys -t popup "cd $current_path && yazi" C-m && \
  tmux attach -t popup
'


#--------------------------------------------------------------
# plugin
#--------------------------------------------------------------

# plugin追加したら、prefix + Iでロードする
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'

# tmux-resurrect/tmux-continuum
set -g @plugin 'tmux-plugins/tmux-resurrect'
## pane-contentをrestore
set -g @resurrect-capture-pane-contents 'on'
## restore process [~:プロセス名が部分一致していたら、そのプロセスを復元する][->:復元の際に、指定したコマンド名で復元する][*:復元の際に、引数は保持した状態でコマンド名で復元する]
## https://github.com/tmux-plugins/tmux-resurrect/blob/cff343cf9e81983d3da0c8562b01616f12e8d548/docs/restoring_programs.md#clarifications
set -g @resurrect-processes '"~vim -> vim" "~nvim > nvim" "~make" "~npm"'
## restore vim session
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
## keybindをprefix→S・Rに設定
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'

set -g @plugin 'tmux-plugins/tmux-continuum'
## tmux起動時にtmux-continuumで最後に保存された環境で復元する（デフォルトでは15分毎に自動保存）
set -g @continuum-restore 'on'

# tmux-easy-motion
# set -g @plugin 'IngoMeyer441/tmux-easy-motion'
## mode切替に切り替えるキーバインド(prefix + value)
# set -g @easy-motion-prefix "J"
# set -g @easy-motion-target-keys "67890"
## https://github.com/IngoMeyer441/tmux-easy-motion/blob/master/easy_motion.tmux
## mode切替→easy-motion jump line(k)を1コマンドに設定
# bind O switch-client -T easy-motion \
#   "\;" run-shell -b "~/.config/tmux/plugins/tmux-easy-motion/scripts/easy_motion.sh '893' '#{session_id}' '#{window_id}' '#{pane_id}' 'k'"
## mode切替→easy-motion jump char(f)を1コマンドに設定
# bind P switch-client -T easy-motion \
#   "\;" command-prompt -1 -p "character:" {
#       set -g @tmp-easy-motion-argument "%%%"
#       run-shell -b "~/.config/tmux/plugins/tmux-easy-motion/scripts/easy_motion.sh '893' '#{session_id}' '#{window_id}' '#{pane_id}' 'bd-f' '#{q:@tmp-easy-motion-argument}'"
#   }

# tmux-thumbs
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @thumbs-alphabet qwerty-right-hand
# 同じ文字列に同じヒントを割り当てる
set -g @thumbs-unique enabled
# ヒントを割り当てる方向を逆にする
set -g @thumbs-reverse enabled
# hintを選んだ時のコマンドを指定
set -g @thumbs-command 'echo -n {} | gocopy'
set -g @thumbs-upcase-command 'open {}'
run "~/.config/tmux/plugins/tmux-thumbs/tmux-thumbs.tmux"

# tmux-cpu
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g status-right '#{cpu_fg_color} CPU: #{cpu_icon} #{cpu_percentage} #{ram_fg_color} MEM: #{ram_icon} #{ram_percentage}'
set -g status-left '#[fg=#FFFF00]#S                               '
set -g status-left-length 35

# tmux-fzf
set -g @plugin 'sainnhe/tmux-fzf'
bind C-b run-shell -b "${HOME}/.config/tmux/plugins/tmux-fzf/scripts/pane.sh switch"
TMUX_FZF_OPTIONS="-p -w 90% -h 90% -m --layout=reverse --border"
TMUX_FZF_PANE_FORMAT="[#I#P] #{pane_current_command} #{pane_current_path}"

# Tmux plugin managerを初期化する
run '~/.config/tmux/plugins/tpm/tpm'
