"" 一般
"バックアップファイルを作らない
set nobackup
"スワップファイルを作らない
set noswapfile
" マウス操作の有効化
set mouse=a
" コマンドラインの履歴上限を10000件にする
set history=10000
" session保存時のオプション
set sessionoptions+=localoptions

"" ファイラー(netrw)
" ファイルタイプの自動検出、ファイルタイプ用の プラグインとインデント設定 を自動読み込み
filetype plugin indent on
" ファイルツリーの表示形式、1にするとls -laのような表示になります
let g:netrw_liststyle=1
" ヘッダを非表示にする
let g:netrw_banner=0
" サイズを(K,M,G)で表示する
let g:netrw_sizestyle="H"
" 日付フォーマットを yyyy/mm/dd(曜日) hh:mm:ss で表示する
let g:netrw_timefmt="%Y/%m/%d(%a) %H:%M:%S"
" プレビューウィンドウを垂直分割で表示する
let g:netrw_preview=1
" Enterで、垂直分割表示
let g:netrw_browse_split = 2

"" エディタ表示関係
" カーソルラインをハイライト
set cursorline
" 行番号を表示
set number
" 相対行番号の表示
" set relativenumber
" シンタックスハイライト有効
syntax on
" カーソル位置表示
set ruler
" カーソル形状の変更
if has('vim_starting')
    " 挿入モード時に点滅の縦棒タイプのカーソル
    let &t_SI .= "\e[5 q"
    " ノーマルモード時に点滅のブロックタイプのカーソル
    let &t_EI .= "\e[1 q"
    " 置換モード時に非点滅の下線タイプのカーソル
    let &t_SR .= "\e[4 q"
endif


"" 表示関係
" ステータスを常時表示
set laststatus=2
" 入力したコマンドが右下に表示
set showcmd
"タイトルを表示
set title
"80列目の色は灰色周辺の色に変更
highlight ColorColumn ctermbg=235 guibg=#2c2d27

"" 検索関連
" 検索ハイライトを有効
set hlsearch
" 検索時に大文字小文字を区別しない
set ignorecase
" 検索時に大文字が含まれたら大文字検索を無視しない
set smartcase
" インクリメンタルサーチ
set incsearch


"" 入力関連
" タブ文字の表示幅
set tabstop=2
" 自動インデントのスペース幅
set shiftwidth=2
" 改行時に同じレベルにインデントする
set autoindent
" 改行時に入力された行の末尾に合わせて次の行のインデントを増減する
set smartindent
" 対応する括弧を表示
set showmatch
" tabの代わり指定のspace数を入力
set expandtab
" カーソルを行頭、行末で止まらないようにする
set whichwrap=b,s,h,l,<,>,[,]
" BSで削除できるものを指定
" indent  : 行頭の空白
" eol     : 改行
" start   : 挿入モード開始位置より手前の文字
set backspace=indent,eol,start

"" キーバインド関連
" leaderキーを設定
let mapleader = ","
" {n,i,x,c...}[nore]map: [non-recursive] map (n:normal,i:insert,x:visual,c:command lineモード)
" xnoremap <key-sequence> <vim-command>
" xをdに割り当て
nnoremap x d
xnoremap x d
" xxをddに割り当て
nnoremap xx dd
xnoremap xx dd
" ddを無効化してバッファに影響しないようにする
nnoremap dd "_dd
xnoremap dd "_dd
" d,c,sはレジスタに登録しないようにする
nnoremap d "_d
xnoremap d "_d
nnoremap D "_D
nnoremap s "_s
nnoremap S "_S
nnoremap c "_c
xnoremap c "_c
nnoremap C "_C
xnoremap C "_C

" 最終行の行末に移動
nnoremap GG G$
xnoremap GG G$
" <leader>hl → 行頭・行末移動
nnoremap <leader>h ^
nnoremap <leader>l $
xnoremap <leader>h ^
xnoremap <leader>l $h
" clipboardにyank
noremap gy "+y
" ESC連打でハイライト解除
nnoremap <Esc><Esc> :nohlsearch<CR><Esc>
" ctrl + kでカーソルより後ろ削除
cnoremap <C-k> <C-\>e(" ".getcmdline())[:getcmdpos()-1][1:]<CR>
" Emacs-like movement in Insert/Command
noremap! <C-a> <Home>
noremap! <C-e> <End>
" 新しいタブを開く
nnoremap <leader>t :tabnew<CR>
" タグジャンプする/1つ前のタグに戻る
nnoremap <leader>] :tag<CR>
nnoremap <leader>[ :pop<CR>
" 相対・絶対行の表示切替
nnoremap <leader>n :<C-u>setlocal relativenumber!<CR>
" popupでterminalを開く
nnoremap <leader>p :call popup_create(term_start([&shell], #{ hidden: 1, term_finish: 'close'}), #{ border: [], minwidth: winwidth(0), minheight: &lines/2 })<CR>
nnoremap <leader>p :call popup_create(term_start([&shell], #{ hidden: 1, term_finish: 'close'}), #{ border: [], minwidth: winwidth(0), minheight: &lines/2 })<CR>
" インサートモードに戻る
tnoremap <F2> <C-\><C-n>
" 選択範囲を検索
vnoremap / <ESC>/\%V
vnoremap ? <ESC>?\%V

" abbr
cabbr he help
cabbr te terminal
cabbr teh horizon terminal
cabbr tet horizon terminal
cabbr tev vertical terminal
cabbr tey vertical terminal
cabbr sv source ~/.config/vim/.vimrc
" 挿入モードの切り替え
cabbr <leader>P :set paste!
" :s で%s//(置換後)/gを呼び出し
cabbr <expr> s getcmdtype() .. getcmdline() ==# ':s' ? [getchar(), ''][1] .. "%s//" : 's'

" ウィンドウ最大化/もとに戻す関数
let g:toggle_window_size = 0
function! ToggleWindowSize()
  if g:toggle_window_size == 1
    exec "normal \<C-w>="
    let g:toggle_window_size = 0
  else
    :resize
    :vertical resize
    let g:toggle_window_size = 1
  endif
endfunction
nnoremap <leader>z :call ToggleWindowSize()<CR>
nnoremap <A-z> :call ToggleWindowSize()<CR>

" g1からg9のキーバインドで1-9のタブに移動するキーバインド追加
function! GoToNthTab(n)
  " 目的のタブ番号を計算
  let target_tab = a:n
  " タブ番号が存在する範囲内であればタブに移動
  if target_tab <= tabpagenr('$')
    execute "tabnext " . target_tab
  else
    echoerr "Target tab does not exist"
  endif
endfunction
for i in range(1, 9)
  execute "nnoremap g" . i . " :call GoToNthTab(" . i . ")<CR>"
endfor

" コマンドラインモード
" コマンドラインモードで<Tab>キーによるファイル名補完を有効にする
set wildmenu

" clipboardにコピー
" set clipboard+=unnamed
" WSLの場合はclip.exeでコピー
if has('unix') && system('uname -r') =~ 'microsoft' && system('uname') =~ 'Linux'
  augroup Yank
    autocmd!
    " +レジスタにyankされた場合のみ、クリップボードにコピー
    autocmd TextYankPost * if v:event['regname'] ==# '+' | :call system('clip.exe', @") | endif
  augroup END
endif
" デフォルトを垂直分割にする
set diffopt=vertical

"" プラグイン関係
" dein.vimのディレクトリ設定
let s:dein_dir = expand('~/.cache/dein')
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

" dein.vimインストールチェック
if &runtimepath !~# '/dein.vim'
  if !isdirectory(s:dein_repo_dir)
    execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
  endif
  execute 'set runtimepath^=' . s:dein_repo_dir
endif

" dein.vimの設定
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  " .tomlファイルのディレクトリ設定
  let s:rc_dir = expand('~/.config/vim')
  if !isdirectory(s:rc_dir)
    call mkdir(s:rc_dir, 'p')
  endif

  " tomlファイル読み込み&cache
  let s:toml = s:rc_dir . '/dein.toml'
  call dein#load_toml(s:toml, {'lazy': 0})

  let s:toml_lazy=s:rc_dir . '/dein-lazy.toml'
  call dein#load_toml(s:toml_lazy, {'lazy': 1})

  call dein#end()
  call dein#save_state()
endif

" pluginインストールチェック
if dein#check_install()
  call dein#install()
endif

" plugin削除チェック
" let s:removed_plugins = dein#check_clean()
" if len(s:removed_plugins) > 0
"   call map(s:removed_plugins, "delete(v:val, 'rf')")
"   call dein#recache_runtimepath()
" endif

