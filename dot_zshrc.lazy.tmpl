# cSpell:disable
#--------------------------------------------------------------
# path , alias
#--------------------------------------------------------------

alias gb='git branch'
alias gf='git fetch -p'
alias ll='ls -l'
alias la='ls -la'
alias mh='make help'
alias nr='npm run'
alias vim='nvim'

#--------------------------------------------------------------
# plugin
#--------------------------------------------------------------

# https://github.com/zdharma-continuum/zinit?tab=readme-ov-file#ice-modifiers
# wait = 遅延読み込み wait"0"と同義
# lucid = プラグイン読込時の表示をOFF
# blockf = プラグインによる$pathの変更を禁止する
# light-mode = for構文におけるzinit light(light-modeがない場合はzinit snippet相当)
# as"program" = zshプラグインでないものを読込(ソースを$pathに追加)
# as"completion" = 補完プラグインとして追加
# from = clone先を指定 [from"github"(デフォルト)/from"gh-r"(Github Release)]
# bpick= gh-rするファイル名を指定 [例.bpick"nnn-v*"]
# mv = ファイルをmv
# cp = ファイルをcp
# atclone= clone後に実行する関数を指定
# atpull= pull後(upgrade)に実行する関数を指定 [atpull"%atclone" = atcloneの内容を実行]
# configure=./configureを実行、make前に実行の場合はconfigure'!'
# make= make install、インストール先を指定するにはmake PREFIX=$ZPFX
# rustup = rust installer
# cargo = rust builder and package manager
# (plugin script loading)
# src = 読込完了時に指定ファイル読込
# atload = 読込完了時に実行する関数を指定
# pick = 引数に与えられたものを$pathに追加
# sbin = 引数に与えられたものを$pathに追加

# 実行順:atinit -> atpull! -> make'!!' -> mv -> cp -> make! -> atclone/atpull -> make -> (plugin script loading) -> src -> multisrc -> atload.
# https://github.com/zdharma-continuum/zinit?tab=readme-ov-file#order-of-execution

### command ###

# asdf #
# __asdf_atclone() {
#     asdf plugin add act
#     asdf plugin add chezmoi
#     asdf plugin add golang
#     asdf plugin add nodejs
#     asdf plugin add python
#     asdf plugin add ruby
#     asdf plugin add tmux
#     asdf plugin add vim
# }
# __asdf_atload() {
#     export ASDF_GOLANG_MOD_VERSION_ENABLED=true
#     export ASDF_DATA_SHIMS="$HOME/.asdf/shims"
#     export ASDF_DATA_INSTALLS="$HOME/.asdf/installs"
#     export ASDF_CONFIG_FILE="$HOME/.config/asdf/.asdfrc"
#     export PATH="$ASDF_DATA_SHIMS:$ASDF_DATA_INSTALLS:$PATH"
# }
# zinit wait lucid light-mode blockf for \
#     src"asdf.sh" \
#     atclone"__asdf_atclone" \
#     atload"__asdf_atload" \
#     @'asdf-vm/asdf'

# atuin #
__atuin_atload() {
    eval "$(atuin init zsh --disable-up-arrow --disable-ctrl-r)"
    export ATUIN_CONFIG_DIR="$HOME/.config/atuin"
}
{{ if eq .chezmoi.os "darwin" -}}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v18.0.1" \
    sbin"atuin*/atuin" \
    atclone"atuin gen-completions --shell zsh > _atuin" atpull"%atclone" \
    atload"__atuin_atload" \
    @'atuinsh/atuin'
{{ else }}
zinit wait lucid light-mode blockf for \
    from"gh-r" bpick"*x86_64-unknown-linux-musl*" \
    ver"v18.0.1" \
    sbin"atuin*/atuin" \
    atclone"atuin gen-completions --shell zsh > _atuin" atpull"%atclone" \
    atload"__atuin_atload" \
    @'atuinsh/atuin'
{{- end }}

# bat #
__bat_atload() {
    export BAT_THEME="Monokai Extended"
}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.23.0" \
    sbin"bat*/bat" \
    cp"bat*/autocomplete/bat.zsh -> _bat" \
    atload"__bat_atload" \
    @'sharkdp/bat'

# Clipboard #
# __clipboard_atload() {
#     export CLIPBOARD_SILENT=1
# }
# zinit wait lucid light-mode blockf for \
#     from"gh-r" \
#     sbin"bin/cb" \
#     atload"__clipboard_atload" \
#     @'Slackadays/Clipboard'

zinit wait lucid light-mode blockf for \
    atclone"go build cmd/gocopy/gocopy.go && go build cmd/gopaste/gopaste.go" atpull"%atclone" \
    sbin"gocopy -> gocopy" \
    sbin"gopaste -> gopaste" \
    @'atotto/clipboard'

# delta #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"0.16.5" \
    sbin"delta*/delta" \
    atload"compdef _gnu_generic delta" \
    @'dandavison/delta'

# diffnav #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.2.8" \
    sbin"diffnav" \
    @'dlvhdr/diffnav'

# difftastic #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"0.54.0" \
    sbin"difft" \
    @'Wilfred/difftastic'

# dura #
zinit wait lucid light-mode blockf for \
    cargo"dura" \
    sbin"bin/dura" \
    @'tkellogg/dura'

# fzf #
__fzf_atload() {
    export FZF_DEFAULT_COMMAND='find $PWD -type d -path "$PWD/.*" -prune -o -not -name ".*" -type f -name "*" -print'
    {{ if eq .chezmoi.os "darwin" -}}
    export FZF_DEFAULT_OPTS='-m --height 40% --layout=reverse --border --bind ctrl-k:kill-line,alt-right:forward-word,alt-left:backward-word'
    {{ else -}}
    export FZF_DEFAULT_OPTS='-m --height 40% --layout=reverse --border'
    bindkey "^[R" fzf-history-widget # alt + shift + r
    bindkey -r "^R"
    {{- end }}
}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.55.0" \
    sbin"fzf" \
    atload"__fzf_atload" \
    @'junegunn/fzf'
zinit wait lucid blockf for \
    "https://github.com/junegunn/fzf/blob/master/shell/key-bindings.zsh" \
    "https://github.com/junegunn/fzf/blob/master/shell/completion.zsh"

# fx #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"30.1.0" \
    sbin"fx* -> fx" \
    @'antonmedv/fx'

# ghq #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v1.4.2" \
    sbin"*/ghq" \
    @'x-motemen/ghq'

# gitui #
zinit wait lucid light-mode blockf for \
    from"gh-r" cargo"gitui" \
    ver"v0.22.1" \
    sbin"gitui" \
    @'extrawurst/gitui'

# github-cli #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v2.55.0" \
    sbin"gh*/bin/gh" \
    atclone"./gh*/bin/gh completion -s zsh >_gh" atpull"%atclone" \
    @'cli/cli'

# git-who #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.7" \
    sbin"git-who" \
    @'sinclairtarget/git-who'

# gh-extension(gh-dash) #
{{ if eq .chezmoi.os "darwin" -}}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v4.14.0" \
    sbin"*darwin* -> gh-dash" \
    @'dlvhdr/gh-dash'
{{ else -}}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v4.14.0" \
    sbin"*linux* -> gh-dash" \
    @'dlvhdr/gh-dash'
{{- end }}

# gh-extension(gh-poi) #
{{ if eq .chezmoi.os "darwin" -}}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.10.1" \
    sbin"darwin* -> gh-poi" \
    @'seachicken/gh-poi'
{{ else -}}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.10.1" \
    sbin"linux* -> gh-poi" \
    @'seachicken/gh-poi'
{{- end }}

# glow #
__glow_atclone() {
{{ if eq .chezmoi.os "darwin" -}}
    [ -e "$HOME/.config/glow/glow.yml" ] && ln -f "$HOME/.config/glow/glow.yml" "$HOME/Library/Preferences/glow/glow.yml"
{{- end }}
}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v2.1.0" \
    sbin"glow" \
    atclone"__glow_atclone" \
    @'charmbracelet/glow'

# ijq #
zinit wait lucid light-mode blockf for \
    make \
    sbin"ijq -> ijq" \
    @'gpanders/ijq'

# jq #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"jq-1.6" \
    sbin"jq* -> jq" \
    @'jqlang/jq'

# koji #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v3.1.0" \
    sbin"koji* -> koji" \
    @'cococonscious/koji'

# lazydocker #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.23.1" \
    sbin"lazydocker* -> lazydocker" \
    @'jesseduffield/lazydocker'

# mise #
__mise_atload() {
    # czg
    [ -e "$HOME/.config/commitizen/.czrc" ] && [ -z "$HOME/.czrc" ] && ln -f "$HOME/.config/commitizen/.czrc" "$HOME/.czrc"
    [ -e "$HOME/.config/commitizen/.commitlintrc.js" ] && [ -z "$HOME/.commitlintrc.js" ] && ln -f "$HOME/.config/commitizen/.commitlintrc.js" "$HOME/.commitlintrc.js"
    # mise
    eval "$(mise activate zsh)"
}
{{ if eq .chezmoi.os "darwin" -}}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v2024.12.24" \
    bpick"mise*-x64" \
    bpick"mise*-arm64" \
    sbin"mise*-arm64 -> mise" \
    sbin"mise*macos-x64 -> mise-x64" \
    atload"__mise_atload" \
    @'jdx/mise'
{{ else -}}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v2024.12.24" \
    sbin"mise* -> mise" \
    atload"__mise_atload" \
    @'jdx/mise'
{{- end }}

# navi #
# atload"eval $(navi widget zsh)" \
__navi_atclone() {
    [ -e "$HOME/.config/navi/config.yaml" ] && \
    [ -e "$(navi info config-path)" ] && \
    [ "$HOME/.config/navi/config.yaml" = "$(navi info config-path)" ] && \
    ln -s "$HOME/.config/navi/config.yaml" "$(navi info config-path)"
}
zinit wait lucid light-mode blockf for \
    from"gh-r" cargo"navi" \
    ver"v2.22.1" \
    sbin"navi" \
    atclone"__navi_atclone" \
    @'denisidoro/navi'

# tig #
{{ if eq .chezmoi.os "darwin" -}}
zinit wait lucid light-mode blockf for \
    atclone"make configure && make prefix=$ZPFX install-release-doc" \
    atpull"%atclone" \
    ver"tig-2.5.10" \
    configure"!" \
    make"install PREFIX=$ZPFX" \
    @'jonas/tig'
{{- end }}

# tgpt #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v2.7.1" \
    sbin"tgpt* -> tgpt" \
    @'aandrew-me/tgpt'

# spacer #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.3.0" \
    sbin"spacer* -> spacer" \
    @'samwho/spacer'

# ugrep #
{{ if eq .chezmoi.os "darwin" -}}
zinit wait lucid light-mode blockf for \
     configure"!" \
     make"all install PREFIX=$ZPFX" \
     pick"bin/ug bin/ugrep" \
     sbin"bin/ug -> ug" \
     sbin"bin/ugrep -> ugrep" \
     @'Genivia/ugrep'
{{ else -}}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v4.4.1" \
    sbin"ug* -> ug" \
    sbin"ugrep* -> ugrep" \
    @'Genivia/ugrep'
{{- end }}

# up #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.4" \
    sbin"up* -> up" \
    @'akavel/up'

# yazi #
{{ if eq .chezmoi.os "darwin" -}}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.2.5" \
    sbin"yazi*/yazi -> yazi" \
    @'sxyazi/yazi'
{{ else -}}
# NOTE:version `GLIBC_2.33' not foundのエラー回避のため暫定的にversion固定
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.1.4" \
    sbin"yazi* -> yazi" \
    @'sxyazi/yazi'
{{- end }}

# z #
#__z_atload() {
#    export _Z_DATA="$HOME/.local/state/z/.z"
#}
#zinit wait lucid light-mode blockf for \
#    as"program" pick"z" \
#    src"z.sh" cp"z.sh -> z" \
#    atload"__z_atload" \
#    rupa/z

# zabrze #
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.3.0" \
    as"program" \
    atload'eval "$(zabrze init --bind-keys)"' \
    @'Ryooooooga/zabrze'

# zoxide #
__zoxide_atload() {
    mkdir -p "$HOME/.local/state/zoxide" 2>/dev/null
    export _ZO_DATA_DIR="$HOME/.local/state/zoxide"
    eval "$(zoxide init zsh --cmd j)"
}
zinit wait lucid light-mode blockf for \
    from"gh-r" \
    ver"v0.9.2" \
    sbin"zoxide" \
    atload"__zoxide_atload" \
    @'ajeetdsouza/zoxide'

{{ if eq .chezmoi.os "darwin" -}}
# blueutil #
zinit wait lucid light-mode blockf for \
    make \
    sbin"blueutil" \
    @'toy/blueutil'
{{- end }}

## programs ##

# git-jump #
zinit wait lucid light-mode blockf for \
    as"program" pick"git-jump" \
    "https://github.com/git/git/blob/master/contrib/git-jump/git-jump"

zinit wait lucid light-mode blockf for \
    as"program" pick"fzf-tmux" \
    "https://github.com/junegunn/fzf/blob/master/bin/fzf-tmux"

### node ###
# __node_atclone() {
#     [ -e "$HOME/.config/commitizen/.czrc" ] && ln -f "$HOME/.config/commitizen/.czrc" "$HOME/.czrc"
#     [ -e "$HOME/.config/commitizen/.commitlintrc.js" ] && ln -f "$HOME/.config/commitizen/.commitlintrc.js" "$HOME/.commitlintrc.js"
# }
# zinit wait lucid light-mode blockf for \
#     node"!cspell -> cspell" \
#     atclone"__node_atclone" \
#     @'ryo246912/null3'
#
# zinit wait lucid light-mode blockf for \
#     node"!czg -> czg" \
#     @'ryo246912/null'
#
# zinit wait lucid light-mode blockf for \
#     node"!open-cli -> open-cli" \
#     @'ryo246912/null1'

### python ###
# zinit wait lucid light-mode blockf for \
#     pip"!gita -> gita" \
#     @'ryo246912/null2'
#
# zinit wait lucid light-mode blockf for \
#     pip"deepl <- !deepl-cli -> deepl" \
#     @'ryo246912/null4'

### plugin ###
__zsh-autosuggestions_atload() {
    ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=100"
    _zsh_autosuggest_start
}
zinit wait lucid light-mode blockf for \
    atload"__zsh-autosuggestions_atload" \
    @'zsh-users/zsh-autosuggestions'

zinit wait lucid light-mode blockf for \
    atload"source autopair.zsh && autopair-init" \
    @'hlissner/zsh-autopair'

{{ if eq .chezmoi.os "darwin" -}}
__zsh-auto-notify_atload() {
    export AUTO_NOTIFY_THRESHOLD=20
    AUTO_NOTIFY_IGNORE+=(
      "czg"
      "chezmoi apply"
      "git log"
      "git show"
      "git rebase"
      "gitui"
      "gh pr create"
      "gh pr diff"
      "gh pr edit"
    )
}
zinit wait lucid light-mode blockf for \
    atload"__zsh-auto-notify_atload" \
    @'MichaelAquilina/zsh-auto-notify'
{{- end}}

zinit wait lucid light-mode blockf for \
    @'zdharma/fast-syntax-highlighting'

# zinit wait lucid light-mode blockf for \
#     @'olets/zsh-abbr'

### completion ###

zinit wait lucid light-mode blockf for \
    as"completion" \
    atload"zicompinit; zicdreplay" cp"git-completion.zsh -> _git" \
    "https://github.com/git/git/blob/master/contrib/completion/git-completion.zsh"

zinit wait lucid light-mode blockf for \
    silent \
    atclone"zstyle ':completion:*:*:git:*' script git-completion.bash" atpull"%atclone" \
    "https://github.com/git/git/blob/master/contrib/completion/git-completion.bash"

zinit wait lucid light-mode blockf for \
    as"completion" "https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker"

zinit wait lucid light-mode blockf for \
    as"completion" "https://raw.githubusercontent.com/docker/compose/1.29.2/contrib/completion/zsh/_docker-compose"

zinit wait lucid light-mode blockf for \
    as"completion" "https://github.com/Homebrew/brew/blob/master/completions/zsh/_brew"

zinit wait lucid light-mode blockf for \
    as"completion" "https://github.com/jarun/nnn/blob/master/misc/auto-completion/zsh/_nnn"

zinit wait lucid light-mode blockf for \
    src"tmux" \
    as"completion" "https://github.com/imomaliev/tmux-bash-completion/blob/master/completions/tmux"

zinit wait lucid light-mode blockf for \
    atload"source zsh-better-npm-completion.plugin.zsh" \
    as"completion" "https://github.com/lukechilds/zsh-better-npm-completion/blob/master/zsh-better-npm-completion.plugin.zsh"

# zinit wait lucid light-mode blockf for \
#     as"completion" "https://github.com/nosarthur/gita/blob/master/auto-completion/zsh/_gita" \
#     as"completion" "https://github.com/nosarthur/gita/blob/master/auto-completion/zsh/.gita-completion.zsh"

zinit wait lucid light-mode blockf for \
    as"completion" "https://github.com/jdx/mise/blob/main/completions/_mise"

zinit wait lucid light-mode blockf for \
    mv"chezmoi.zsh -> _chezmoi" \
    as"completion" "https://github.com/twpayne/chezmoi/blob/master/completions/chezmoi.zsh"
#--------------------------------------------------------------
# fzf-function
#--------------------------------------------------------------

{{ if eq .chezmoi.os "darwin" -}}
# fcb - fuzzy chrome bookmark
fcb() {
  bookmarks_path="$HOME/Library/Application Support/Google/Chrome/Profile 1/Bookmarks"

  jq_script='
    def ancestors: while(. | length >= 2; del(.[-1,-2]));
    . as $in | paths(.url?) as $key | $in | getpath($key) | {name,url, path: [$key[0:-2] | ancestors as $a | $in | getpath($a) | .name?] | reverse | join("/") } | .path + "/" + .name + "\t" + .url'

  jq -r "$jq_script" < "$bookmarks_path" \
    | sed -E $'s/(.*)\t(.*)/\\1\t\x1b[36m\\2\x1b[m/g' \
    | fzf --ansi \
    | cut -d$'\t' -f2 \
    | xargs open
}

# fch - fuzzy chrome history
fch() {
  local cols sep google_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if [ "$(uname)" = "Darwin" ]; then
    google_history="$HOME/Library/Application Support/Google/Chrome/Profile 1/History"
    open=open
  else
    google_history="$HOME/.config/google-chrome/Profile 1/History"
    open=xdg-open
  fi
  cp -f "$google_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}
{{- end }}

# ff - fuzzy find
ff() {
  find ${1:-.} | fzf | tr -d '\n' | cb
}

# fgb - fuzzy git branch
fgb() {
  git for-each-ref --format='%(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t' | fzf | awk '{ print $1 }' | tr -d '\n' | cb
}

# fgc - fuzzy git checkout branch
fgc() {
  git branch --format='%(refname:short) %09 %(committername) %09 %(committerdate:format:%Y/%m/%d %H:%M) %09 %(objectname:short)' | column -ts $'\t' | fzf | awk '{ print $1 }' | xargs -I % git checkout %
}

# fgh - fuzzy git hash copy
fgh() {
  local commits commit
  commits=$(git log --oneline) &&
  commit=$(echo "$commits" | fzf --preview "git show {1} | delta --no-gitconfig") &&
  $(echo "$commit" | awk '{print $1}' | tr -d '\n' | cb)
}

# fghd - fuzzy git hash diff copy
fghd() {
  local commits commit1 commit2
  commits=$(git log --oneline) &&
  commit1=$(echo "$commits" | fzf | awk '{print $1}') &&
  commit2=$(echo "$commits" | fzf --preview "git diff "$commit1...{1}" | delta --no-gitconfig" | awk '{print $1}') &&
  git diff "$commit1...$commit2" | delta &&
  $(echo "$commit1...$commit2" | tr -d '\n' | cb)
}

# fnr - fuzzy npm run
fnr() {
  local script
  script=$(cat package.json | jq -r '.scripts | to_entries[] | [.key,.value] | @csv' | column -t -s, | fzf | awk '{print $1}' | tr -d '"') &&
  if [ -n "$script" ]; then
    npm run $script
  fi
}

# fz - fuzzy z command
#fz() {
#  local res=$(z | sort -rn | cut -c 12- | fzf)
#  if [ -n "$res" ]; then
#      cd $res
#  else
#      return 1
#  fi
#}

#--------------------------------------------------------------
# zsh widget
#--------------------------------------------------------------

# ctrl + d(alt + shift + d)でgitui起動
_gitui() {
  if [ -n "$TMUX" ]; then
    tmux popup -xC -yC -w95% -h95% -E -d "#{pane_current_path}" gitui
  else
    BUFFER='gitui'
    zle accept-line
  fi
}
zle -N _gitui
{{ if eq .chezmoi.os "darwin" -}}
bindkey "^D" _gitui
{{ else }}
bindkey "^[D" _gitui
{{- end }}

# ctrl + n(alt + shift + n)でnnn起動
_nnn() {
  BUFFER='nnn -dHUx'
  zle accept-line
}
zle -N _nnn
{{ if eq .chezmoi.os "darwin" -}}
bindkey "^N" _nnn
{{ else }}
bindkey "^[N" _nnn
{{- end }}

# ctrl + w(alt + shift + w)でgitui起動
_gh-dash() {
  if [ -n "$TMUX" ]; then
    tmux popup -xC -yC -w95% -h95% -E -d "#{pane_current_path}" gh-dash
  else
    BUFFER='gh-dash'
    zle accept-line
  fi
}
zle -N _gh-dash
{{ if eq .chezmoi.os "darwin" -}}
bindkey "^W" _gh-dash
{{ else }}
bindkey "^[W" _gh-dash
{{- end }}

# ctrl + y(alt + shift + y)でyazi起動
_yazi() {
  if [ -n "$TMUX" ]; then
    tmux popup -xC -yC -w95% -h95% -E -d "#{pane_current_path}" yazi
  else
    BUFFER='yazi'
    zle accept-line
  fi
}
zle -N _yazi
{{ if eq .chezmoi.os "darwin" -}}
bindkey "^Y" _yazi
{{ else }}
bindkey "^[Y" _yazi
{{- end }}

# ctrl + g(alt + shift + g)でnavi widgetを呼び出し
_custom_navi_widget() {
  # [-b:buffer name][-d:delete buffer][-r:LFを自動で置換しない][-p:paste時にコマンドを自動で実行しない][-t:target pane]
  #後方の空白文字を削除 ${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"}
  #前方の空白文字を削除 ${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"}
  #複数の連続した空白を1つにする sed -e "s/  */ /g"
  if [ -n "$TMUX" ]; then
  {{ if eq .chezmoi.os "darwin" -}}
    tmux popup -xC -y "#{popup_pane_bottom}" -d "#{pane_current_path}" -w95% -h40% -E '\
      window=$(tmux display -p -F "#S:#I.#P") && \
      export FZF_DEFAULT_OPTS="-m --layout=reverse --border" && \
      TMP_BUFFER=$(navi --print) && \
      TMP_BUFFER=${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"} && \
      TMP_BUFFER=${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"} && \
      TMP_BUFFER=$((tr "\n" " " | sed -e "s/  */ /g") <<< "$TMP_BUFFER") && \
      tmux set-buffer -b tmp "$TMP_BUFFER" && \
      tmux paste-buffer -drp -t $window -b tmp \
    '
  {{ else }}
    tmux popup -xC -y "#{popup_pane_bottom}" -d "#{pane_current_path}" -w95% -h40% -E '\
      window=$(tmux display -p -F "#S:#I.#P") && \
      export FZF_DEFAULT_OPTS="-m --layout=reverse --border" && \
      TMP_BUFFER=$(navi --print) && \
      TMP_BUFFER=${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"} && \
      TMP_BUFFER=${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"} && \
      tmux set-buffer -b tmp "$TMP_BUFFER" && \
      tmux paste-buffer -drp -t $window -b tmp \
    '
  {{- end }}
  else
    local TMP_BUFFER
    #後方の空白文字を削除 ${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"}
    #前方の空白文字を削除 ${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"}
    #複数の連続した空白を1つにする sed -e "s/  */ /g"
    TMP_BUFFER=$(navi --print) && \
    TMP_BUFFER=${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"} && \
    TMP_BUFFER=${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"} && \
    TMP_BUFFER=$((tr "\n" " " | sed -e "s/  */ /g") <<< "$TMP_BUFFER")
    BUFFER="$TMP_BUFFER"
    CURSOR=$#BUFFER #カーソルを末尾に移動
    zle redisplay
  fi
}
zle -N _custom_navi_widget
{{ if eq .chezmoi.os "darwin" -}}
bindkey '^G' _custom_navi_widget
{{ else }}
bindkey '^[G' _custom_navi_widget
{{- end }}

# ctrl + q → ctrl + q(alt + shift + q → alt + shift + q)でnaviに登録されたpipe commandのsnippet呼び出し
_navi_insert_pipe_snippet() {
  #後方の空白文字を削除 ${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"}
  #前方の空白文字を削除 ${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"}
  #複数の連続した空白を1つにする sed -e "s/  */ /g"
  local word
  if [ -n "$TMUX" ]; then
    tmux popup -xC -y "#{popup_pane_bottom}" -d "#{pane_current_path}" -w95% -h40% -E '\
      export FZF_DEFAULT_OPTS="-m --layout=reverse --border" && \
      TMP_BUFFER=$(navi --print --query "shell:pipe-command ") && \
      TMP_BUFFER=${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"} && \
      TMP_BUFFER=${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"} && \
      TMP_BUFFER=$((tr "\n" " " | sed -e "s/  */ /g") <<< "$TMP_BUFFER") && \
      tmux set-buffer -b tmp "$TMP_BUFFER" \
    '
    if tmux show-buffer -b tmp > /dev/null 2>&1 ; then
      word=$(tmux show-buffer -b tmp)
    fi
    tmux delete-buffer -b tmp
  else
    #後方の空白文字を削除 ${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"}
    #前方の空白文字を削除 ${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"}
    word=$(navi --print --query "shell:pipe-command ") && \
    word=${word%"${word##*[![:space:]]}"} && \
    word=${word#"${word%%[![:space:]]*}"} && \
    word=$((tr "\n" " " | sed -e "s/  */ /g") <<< "$word")
  fi && \
  if [ -n "$word" ] && [[ $word =~ ">" ]] ; then
    BUFFER="$BUFFER $word"
    CURSOR=$#BUFFER #カーソルを末尾に移動
  elif [ -n "$word" ] ; then
    BUFFER="$BUFFER | $word"
    CURSOR=$#BUFFER #カーソルを末尾に移動
  fi
  zle redisplay
}
zle -N _navi_insert_pipe_snippet
{{ if eq .chezmoi.os "darwin" -}}
bindkey '^Q^Q' _navi_insert_pipe_snippet
{{ else }}
bindkey '^[Q^[Q' _navi_insert_pipe_snippet
{{- end }}

# ctrl + q → ctrl + a(alt + shift + q → alt + shift + a)で余分な空白を削除
_delete_space() {
  local TMP_BUFFER
  TMP_BUFFER=$BUFFER
  TMP_BUFFER=${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"} #後方の空白文字を削除
  TMP_BUFFER=${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"} #前方の空白文字を削除
  TMP_BUFFER=$((tr "\n\t" " " | sed -e 's/  */ /g') <<< "$TMP_BUFFER") #複数の連続した空白を1つにする
  BUFFER=$TMP_BUFFER
  zle redisplay
}
zle -N _delete_space
{{ if eq .chezmoi.os "darwin" -}}
bindkey '^Q^A' _delete_space
{{ else }}
bindkey '^[Q^[A' _delete_space
{{- end }}

# ctrl + q → ctrl + z(alt + shift + q → alt + shift + z)でコマンド履歴を選択して出力
_fzf_insert_command() {
  local num command line array1 array2 word
  command=$(cat <(echo "$BUFFER") <(history -100000 | cut -f 4- -d " " | tac) | fzf)
  if [ -n "$command" ] ; then
    BUFFER="$BUFFER $command"
    CURSOR=$#BUFFER #カーソルを末尾に移動
  fi
  zle redisplay
}
zle -N _fzf_insert_command
{{ if eq .chezmoi.os "darwin" -}}
bindkey '^Q^Z' _fzf_insert_command
{{ else }}
bindkey '^[Q^[Z' _fzf_insert_command
{{- end }}

# ctrl + q → ctrl + x(alt + shift + q → alt + shift + x)でコマンド履歴からwordを選択して出力
_fzf_insert_command_word() {
  local num command line array1 array2 word
  command=$(cat <(echo "$BUFFER") <(history -100000 | cut -f 4- -d " " | tac) | fzf)
  if [ -n "$command" ] ; then
    for i in $(seq $(echo "$command" | wc -m)) ; do
      array1+=( "$(cut -c $i- <(echo $command))\n" )
    done
  fi
  if [ -n "${array1[*]}" ] ; then
    line=$(echo -e "${array1[@]}" | fzf)
    num=$(echo "$line" | wc -m)
    for j in $(seq $num) ; do
      array2+=( "$(cut -c -$((num-j+1)) <(echo $line))\n" )
    done
  fi
  if [ -n "${array2[*]}" ] ; then
    word=$(echo -e "${array2[@]}" | fzf)
    word=${word#"${word%%[![:space:]]*}"} #前方の空白文字を削除
    word=${word%"${word##*[![:space:]]}"} #後方の空白文字を削除
    word=$(echo "$word" | tr -d '\n')
  fi
  if [ -n "$word" ] ; then
    BUFFER="$BUFFER $word"
    CURSOR=$#BUFFER #カーソルを末尾に移動
  fi
  zle redisplay
}
zle -N _fzf_insert_command_word
{{ if eq .chezmoi.os "darwin" -}}
bindkey '^Q^X' _fzf_insert_command_word
{{ else }}
bindkey '^[Q^[X' _fzf_insert_command_word
{{- end }}

# ctrl + q → ctrl + w(alt + shift + q → alt + shift + w)で画面キャプチャしてwordを選択してコピー
_copy_word() {
  local num line1 line2 array1 array2 word
  line1=$(tmux capture-pane -p | fzf)
  if [ -n "$line1" ] ; then
    for i in $(seq $(echo "$line1" | wc -m)) ; do
      array1+=( "$(cut -c $i- <(echo $line1))\n" )
    done
  fi
  if [ -n "${array1[*]}" ] ; then
    line2=$(echo -e "${array1[@]}" | fzf)
    num=$(echo "$line2" | wc -m)
    for j in $(seq $num) ; do
      array2+=( "$(cut -c -$((num-j+1)) <(echo $line2))\n" )
    done
  fi
  if [ -n "${array2[*]}" ] ; then
    word=$(echo -e "${array2[@]}" | fzf)
    word=${word%"${word##*[![:space:]]}"} #後方の空白文字を削除
    word=${word#"${word%%[![:space:]]*}"} #前方の空白文字を削除
  fi
  if [ -n "$word" ] ; then
    echo "$word" | tr -d '\n' | cb
  fi
  zle redisplay
}
zle -N _copy_word
{{ if eq .chezmoi.os "darwin" -}}
bindkey '^Q^W' _copy_word
{{ else }}
bindkey '^[Q^[W' _copy_word
{{- end }}

# ctrl + q → ctrl + s(alt + shift + q → alt + shift + s)でshortcut表示
_shortcut() {
  if [ -n "$TMUX" ]; then
    tmux popup -xC -y "#{popup_pane_bottom}" -d "#{pane_current_path}" -w95% -h40% -E '\
      export FZF_DEFAULT_OPTS="-m --layout=reverse --border" && \
      cat ~/.local/share/chezmoi/not_config/shortcut/list.csv | column -t -s, | fzf --no-sort --layout=reverse --border
    '
  else
    cat ~/.local/share/chezmoi/not_config/shortcut/list.csv | column -t -s, | fzf --no-sort --layout=reverse --border
  fi
}
zle -N _shortcut
bindkey '^Q^S' _shortcut

# ctrl + q → ctrl + g(alt + shift + q → alt + shift + g)でnaviのコマンドをクリップボードにコピー
_navi_copy_snippet() {
  # [-b:buffer name][-d:delete buffer][-r:LFを自動で置換しない][-p:paste時にコマンドを自動で実行しない][-t:target pane]
  #後方の空白文字を削除 ${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"}
  #前方の空白文字を削除 ${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"}
  #複数の連続した空白を1つにする sed -e "s/  */ /g"
  if [ -n "$TMUX" ]; then
    tmux popup -xC -y "#{popup_pane_bottom}" -d "#{pane_current_path}" -w95% -h40% -E '\
      export FZF_DEFAULT_OPTS="-m --layout=reverse --border" && \
      TMP_BUFFER=$(navi --print) && \
      TMP_BUFFER=${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"} && \
      TMP_BUFFER=${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"} && \
      TMP_BUFFER=$((tr "\n" " " | sed -e "s/  */ /g") <<< "$TMP_BUFFER") && \
      tmux set-buffer -b tmp "$TMP_BUFFER" \
    '
    if tmux show-buffer -b tmp > /dev/null 2>&1 ; then
      tmux show-buffer -b tmp | cb
    fi && \
    tmux delete-buffer -b tmp
  else
    #後方の空白文字を削除 ${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"}
    #前方の空白文字を削除 ${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"}
    TMP_BUFFER=$(navi --print)
    TMP_BUFFER=${TMP_BUFFER%"${TMP_BUFFER##*[![:space:]]}"}
    TMP_BUFFER=${TMP_BUFFER#"${TMP_BUFFER%%[![:space:]]*}"}
    TMP_BUFFER=$((tr "\n" " " | sed -e "s/  */ /g") <<< "$TMP_BUFFER")
    echo "$TMP_BUFFER" | tr -d '\n' | cb
    zle redisplay
  fi
}
zle -N _navi_copy_snippet
{{ if eq .chezmoi.os "darwin" -}}
bindkey '^Q^G' _navi_copy_snippet
{{ else }}
bindkey '^[Q^[G' _navi_copy_snippet
{{- end }}

# option + ↑で１つ上のディレクトリに移動
_cd-up () {
  BUFFER='cd ../'
  zle accept-line
}
zle -N _cd-up
bindkey '^[[1;3A' _cd-up

autoload -U modify-current-argument
# Esc + sで単語を''で囲む
_quote-previous-word-in-single() {
    modify-current-argument '${(qq)${(Q)ARG}}'
    zle vi-forward-blank-word
}
zle -N _quote-previous-word-in-single
bindkey '^[s' _quote-previous-word-in-single

# Esc + dで単語を""で囲む
_quote-previous-word-in-double() {
    modify-current-argument '${(qqq)${(Q)ARG}}'
    zle vi-forward-blank-word
}
zle -N _quote-previous-word-in-double
bindkey '^[d' _quote-previous-word-in-double

#--------------------------------------------------------------
# function
#--------------------------------------------------------------

cb() {
  if command -v pbcopy &> /dev/null; then
    command pbcopy
  elif command -v clip.exe &> /dev/null; then
    command clip.exe
  fi
}

open() {
  if command -v open &> /dev/null; then
    command open
  elif command -v xdg-open &> /dev/null; then
    command xdg-open
  fi
}

ssh() {
  # tmux起動時
  if [[ -n $(printenv TMUX) ]] ; then
    # locale対応
    export LC_CTYPE=en_US.UTF-8
    # 接続先ホスト名に応じて背景色切り替え
    if [[ `echo "$1" | grep 'audit'` ]] ; then
      tmux set -p window-active-style 'bg=#400000'
      tmux set -p window-style 'bg=#400000'
    else
      tmux set -p window-active-style 'bg=#002800'
      tmux set -p window-style 'bg=#002800'
    fi

    command ssh $@
    # 色設定を戻す
    tmux set -p window-style 'bg=#303030'
    tmux set -p window-active-style 'bg=#000000'
  else
    command ssh $@
  fi
}

_zsh-history-backup() {
  local backup_dir="$HOME/.local/state/zsh"
  while sleep $((60 * 15)) ; do
    if [[ $(wc -l "$backup_dir/.zsh_history" | grep -o '[0-9]*') -gt 1000 ]] ; then
      cp -f "$backup_dir/.zsh_history" "$backup_dir/zsh_history_backup_$(date '+%y%m')$(printf '%02d' $(( $(date '+%d') / 10 * 10 )))"
      echo "$(date "+[%y/%m/%d %H:%M:%S]") zsh-history-backup!"
    else
      osascript -e 'display notification "Backup Error!" with title "zsh"'
    fi
  done
}

zsh-history-backup() {
  local pid_file="$HOME/.zsh_history_backup_process.pid"
  local cmd="_zsh-history-backup"

  # すでにプロセスが実行中かチェック
  if [[ -f "$pid_file" ]]; then
    local existing_pid=$(cat "$pid_file")

    # プロセスが実行中か確認
    if ps -p "$existing_pid" > /dev/null 2>&1; then
      return 0
    # elif [[ "$(pwd)" != "$HOME" ]]; then
    #   echo "$(pwd)"
    #   echo $PWD
    #   return 0
    else
      echo "pidファイルはあるがプロセスがないので削除"
      rm -f "$pid_file"
    fi
  fi

  # バックアップコマンドをバックグラウンド実行 & PID を保存
  $cmd &
  echo $! > "$pid_file"
  echo "バックアッププロセスを開始しました (PID: $(cat "$pid_file"))"
}

zsh-startuptime() {
  local time_rc
  local total_msec=0
  local msec
  for i in $(seq 1 10); do
    msec=$((TIMEFMT='%mE'; time zsh -i -c exit) 2>/dev/stdout >/dev/null | tr -d "ms")
    echo "${(l:2:)i}: ${msec} [ms]"
    total_msec=$(( $total_msec + $msec ))
  done
  time_rc=$(( ${total_msec} / 10 ))
  local time_norc
  time_norc=$((TIMEFMT="%mE"; time zsh -df -i -c "autoload -Uz compinit && compinit -C; exit") &> /dev/stdout)
  echo "my zshrc: ${time_rc}ms\ndefault zsh: ${time_norc}\n"
}

zsh-profiler() {
  ZSHRC_PROFILE=1 zsh -i -c zprof
}

#--------------------------------------------------------------
# terminal
#--------------------------------------------------------------

# tpmのインストール
! [ -e "$HOME/.config/tmux/plugins/tpm" ] && git clone https://github.com/tmux-plugins/tpm "$HOME/.config/tmux/plugins/tpm"

{{ if eq .chezmoi.os "linux" -}}
# gpg
export GPG_TTY=$(tty)
{{- end }}

#--------------------------------------------------------------
# other
#--------------------------------------------------------------
# historyの保存先
mkdir -p "$HOME/.local/state/node" 2>/dev/null
export NODE_REPL_HISTORY="$HOME/.local/state/node/.node_repl_history"
mkdir -p "$HOME/.local/state/sqlite" 2>/dev/null
export SQLITE_HISTORY="$HOME/.local/state/sqlite/.sqlite_history"
mkdir -p "$HOME/.local/state/mysql" 2>/dev/null
export MYSQL_HISTFILE="$HOME/.local/state/mysql/.mysql_history"
mkdir -p "$HOME/.local/state/psql" 2>/dev/null
export PSQL_HISTORY="$HOME/.local/state/psql/.psql_history"
mkdir -p "$HOME/.local/state/less" 2>/dev/null
export LESSHISTFILE="$HOME/.local/state/less/.lesshst"

# less
export LESS_TERMCAP_mb=$'\e[1;32m'
export LESS_TERMCAP_md=$'\e[1;32m'
export LESS_TERMCAP_me=$'\e[0m'
export LESS_TERMCAP_se=$'\e[0m'
export LESS_TERMCAP_so=$'\e[01;33m'
export LESS_TERMCAP_ue=$'\e[0m'
export LESS_TERMCAP_us=$'\e[1;4;31m'

# slack
export SLACK_DEVELOPER_MENU=true

# docker
export COMPOSE_MENU=0

{{ if eq .chezmoi.os "linux" -}}
# fly
export FLYCTL_INSTALL="$HOME/.fly"
export PATH="$FLYCTL_INSTALL/bin:$PATH"
{{- end }}

# pyenv setting
#export PYENV_ROOT="$HOME/.pyenv"
#export PATH="$PYENV_ROOT/bin:$PATH"
#if command -v pyenv 1>/dev/null 2>&1; then
#  eval "$(pyenv init -)"
#fi

# nodenv setting
#eval "$(nodenv init -)"
#export PATH="$(npm root -g):$PATH"

{{ if eq .chezmoi.os "darwin" -}}
# GokuRakuJoudo(Karabiner-Elements)の設定
export GOKU_EDN_CONFIG_FILE="$HOME/.config/karabiner/karabiner.edn"
{{- end }}

# .zshrc.secretの読込
ZSH_SECRET_CONF="${HOME}/.zshrc.secret"
if [ -e "${ZSH_SECRET_CONF}" ]; then
  source "${ZSH_SECRET_CONF}"
fi

# 補完の読込
autoload -Uz compinit
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

{{ if eq .chezmoi.os "darwin" -}}
if [ $(date +'%j') != $(/usr/bin/stat -f '%Sm' -t '%j' "$HOME/.zcompdump") ]; then
  compinit
else
  compinit -C
fi
{{- else -}}
compinit
{{- end }}

# historyの定期バックアップを起動
zsh-history-backup

# バックグラウンドでzcompile
# [-s:sizeが0以上][-nt:タイムスタンプが新しいか]
{
  files=(
    $HOME/.zprofile{,.secret}
    $HOME/.zshrc{,.secret,.lazy}
    $HOME/.zcompdump
  )
  for file in "${files[@]}" ; do
    if [[ -s "$file" && (! -s "${file}.zwc" || "$file" -nt "${file}.zwc") ]]; then
      zcompile "$file"
    fi
  done
} &!
